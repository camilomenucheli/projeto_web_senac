<?php
/**
 * Akeeba Restore
 *
 * An archive extraction engine for ZIP, JPA and JPS archives.
 *
 * @copyright   2008-2017 Nicholas K. Dionysopoulos / Akeeba Ltd.
 * @license     GNU GPL v2 or - at your option - any later version
 */

define('_AKEEBA_RESTORATION', 1);defined('DS') or define('DS', DIRECTORY_SEPARATOR);define('AK_STATE_NOFILE', 0); define('AK_STATE_HEADER', 1); define('AK_STATE_DATA', 2); define('AK_STATE_DATAREAD', 3); define('AK_STATE_POSTPROC', 4); define('AK_STATE_DONE', 5); if (!defined('_AKEEBA_IS_WINDOWS')){if (function_exists('php_uname')){define('_AKEEBA_IS_WINDOWS', stristr(php_uname(), 'windows'));}else{define('_AKEEBA_IS_WINDOWS', DIRECTORY_SEPARATOR == '\\');}}if (!defined('KSROOTDIR')){define('KSROOTDIR', dirname(__FILE__));}if (!defined('KSLANGDIR')){define('KSLANGDIR', KSROOTDIR);}if (function_exists('setlocale')){@setlocale(LC_ALL, 'en_US.UTF8');}if (!function_exists('fnmatch')){function fnmatch($pattern, $string){return @preg_match('/^' . strtr(addcslashes($pattern, '/\\.+^$(){}=!<>|'),array('*' => '.*', '?' => '.?')) . '$/i', $string);}}if (!function_exists('akstringlen')){if (function_exists('mb_strlen')){function akstringlen($string){return mb_strlen($string, '8bit');}}else{function akstringlen($string){return strlen($string);}}}if (!function_exists('aksubstr')){if (function_exists('mb_strlen')){function aksubstr($string, $start, $length = null){return mb_substr($string, $start, $length, '8bit');}}else{function aksubstr($string, $start, $length = null){return substr($string, $start, $length);}}}function getQueryParam($key, $default = null){$value = $default;if (array_key_exists($key, $_REQUEST)){$value = $_REQUEST[$key];}if (get_magic_quotes_gpc() && !is_null($value)){$value = stripslashes($value);}return $value;}function debugMsg($msg){if (!defined('KSDEBUG')){return;}$fp = fopen('debug.txt', 'at');fwrite($fp, $msg . "\n");fclose($fp);if (defined('KSDEBUGCLI')){echo $msg . "\n";}}

abstract class AKAbstractObject{protected $_errors_queue_size = 0;protected $_warnings_queue_size = 0;private $_errors = array();private $_warnings = array();public function __construct(){}public function getError($i = null){return $this->getItemFromArray($this->_errors, $i);}private function getItemFromArray($array, $i = null){if ($i === null){$item = end($array);}else if (!array_key_exists($i, $array)){return false;}else{$item = $array[$i];}return $item;}public function getErrors(){return $this->_errors;}public function resetErrors(){$this->_errors = array();}public function getWarning($i = null){return $this->getItemFromArray($this->_warnings, $i);}public function getWarnings(){return $this->_warnings;}public function resetWarnings(){$this->_warnings = array();}public function propagateToObject(&$object){if (!is_object($object)){return;}if (method_exists($object, 'setError')){if (!empty($this->_errors)){foreach ($this->_errors as $error){$object->setError($error);}$this->_errors = array();}}if (method_exists($object, 'setWarning')){if (!empty($this->_warnings)){foreach ($this->_warnings as $warning){$object->setWarning($warning);}$this->_warnings = array();}}}public function propagateFromObject(&$object){if (method_exists($object, 'getErrors')){$errors = $object->getErrors();if (!empty($errors)){foreach ($errors as $error){$this->setError($error);}}if (method_exists($object, 'resetErrors')){$object->resetErrors();}}if (method_exists($object, 'getWarnings')){$warnings = $object->getWarnings();if (!empty($warnings)){foreach ($warnings as $warning){$this->setWarning($warning);}}if (method_exists($object, 'resetWarnings')){$object->resetWarnings();}}}public function setError($error){if ($this->_errors_queue_size > 0){if (count($this->_errors) >= $this->_errors_queue_size){array_shift($this->_errors);}}array_push($this->_errors, $error);}public function setWarning($warning){if ($this->_warnings_queue_size > 0){if (count($this->_warnings) >= $this->_warnings_queue_size){array_shift($this->_warnings);}}array_push($this->_warnings, $warning);}protected function setErrorsQueueSize($newSize = 0){$this->_errors_queue_size = (int) $newSize;}protected function setWarningsQueueSize($newSize = 0){$this->_warnings_queue_size = (int) $newSize;}}

abstract class AKAbstractPart extends AKAbstractObject{protected $isPrepared = false;protected $isRunning = false;protected $isFinished = false;protected $hasRan = false;protected $active_domain = "";protected $active_step = "";protected $active_substep = "";protected $_parametersArray = array();protected $databaseRoot = array();protected $observers = array();private $warnings_pointer = -1;final public function tick(){switch ($this->getState()){case "init":$this->_prepare();break;case "prepared":$this->_run();break;case "running":$this->_run();break;case "postrun":$this->_finalize();break;}$out = $this->_makeReturnTable();return $out;}final public function getState(){if ($this->getError()){return "error";}if (!($this->isPrepared)){return "init";}if (!($this->isFinished) && !($this->isRunning) && !($this->hasRun) && ($this->isPrepared)){return "prepared";}if (!($this->isFinished) && $this->isRunning && !($this->hasRun)){return "running";}if (!($this->isFinished) && !($this->isRunning) && $this->hasRun){return "postrun";}if ($this->isFinished){return "finished";}}abstract protected function _prepare();abstract protected function _run();abstract protected function _finalize();final protected function _makeReturnTable(){$warnings = $this->getWarnings();if ($this->_warnings_queue_size == 0){if (($this->warnings_pointer > 0) && ($this->warnings_pointer < (count($warnings)))){$warnings = array_slice($warnings, $this->warnings_pointer + 1);$this->warnings_pointer += count($warnings);}else{$this->warnings_pointer = count($warnings);}}$out = array('HasRun'   => (!($this->isFinished)),'Domain'   => $this->active_domain,'Step'     => $this->active_step,'Substep'  => $this->active_substep,'Error'    => $this->getError(),'Warnings' => $warnings);return $out;}public function getStatusArray(){return $this->_makeReturnTable();}final public function setup($parametersArray){if ($this->isPrepared){$this->setState('error', "Can't modify configuration after the preparation of " . $this->active_domain);}else{$this->_parametersArray = $parametersArray;if (array_key_exists('root', $parametersArray)){$this->databaseRoot = $parametersArray['root'];}}}protected function setState($state = 'init', $errorMessage = 'Invalid setState argument'){switch ($state){case 'init':$this->isPrepared = false;$this->isRunning  = false;$this->isFinished = false;$this->hasRun     = false;break;case 'prepared':$this->isPrepared = true;$this->isRunning  = false;$this->isFinished = false;$this->hasRun     = false;break;case 'running':$this->isPrepared = true;$this->isRunning  = true;$this->isFinished = false;$this->hasRun     = false;break;case 'postrun':$this->isPrepared = true;$this->isRunning  = false;$this->isFinished = false;$this->hasRun     = true;break;case 'finished':$this->isPrepared = true;$this->isRunning  = false;$this->isFinished = true;$this->hasRun     = false;break;case 'error':default:$this->setError($errorMessage);break;}}final public function getDomain(){return $this->active_domain;}final public function getStep(){return $this->active_step;}final public function getSubstep(){return $this->active_substep;}function attach(AKAbstractPartObserver $obs){$this->observers["$obs"] = $obs;}function detach(AKAbstractPartObserver $obs){delete($this->observers["$obs"]);}protected function setBreakFlag(){AKFactory::set('volatile.breakflag', true);}final protected function setDomain($new_domain){$this->active_domain = $new_domain;}final protected function setStep($new_step){$this->active_step = $new_step;}final protected function setSubstep($new_substep){$this->active_substep = $new_substep;}protected function notify($message){foreach ($this->observers as $obs){$obs->update($this, $message);}}}

abstract class AKAbstractUnarchiver extends AKAbstractPart{public $archiveList = array();public $totalSize = array();public $renameFiles = array();public $renameDirs = array();public $skipFiles = array();protected $filename = null;protected $currentPartNumber = -1;protected $currentPartOffset = 0;protected $flagRestorePermissions = false;protected $postProcEngine = null;protected $addPath = '';protected $removePath = '';protected $chunkSize = 524288;protected $fp = null;protected $runState = null;protected $fileHeader = null;protected $dataReadLength = 0;protected $ignoreDirectories = array();public function __construct(){parent::__construct();}public function __wakeup(){if ($this->currentPartNumber >= 0){$this->fp = @fopen($this->archiveList[$this->currentPartNumber], 'rb');if ((is_resource($this->fp)) && ($this->currentPartOffset > 0)){@fseek($this->fp, $this->currentPartOffset);}}}public function shutdown(){if (is_resource($this->fp)){$this->currentPartOffset = @ftell($this->fp);@fclose($this->fp);}}public function isIgnoredDirectory($shortFilename){if (substr($shortFilename, -1) == '/'){$check = rtrim($shortFilename, '/');}else{$check = dirname($shortFilename);}return in_array($check, $this->ignoreDirectories);}final protected function _prepare(){parent::__construct();if (count($this->_parametersArray) > 0){foreach ($this->_parametersArray as $key => $value){switch ($key){case 'filename':$this->filename = $value;if (!empty($value)){$value = strtolower($value);if (strlen($value) > 6){if ((substr($value, 0, 7) == 'http://')|| (substr($value, 0, 8) == 'https://')|| (substr($value, 0, 6) == 'ftp://')|| (substr($value, 0, 7) == 'ssh2://')|| (substr($value, 0, 6) == 'ssl://')){$this->setState('error', 'Invalid archive location');}}}break;case 'restore_permissions':$this->flagRestorePermissions = $value;break;case 'post_proc':$this->postProcEngine = AKFactory::getpostProc($value);break;case 'add_path':$this->addPath = $value;$this->addPath = str_replace('\\', '/', $this->addPath);$this->addPath = rtrim($this->addPath, '/');if (!empty($this->addPath)){$this->addPath .= '/';}break;case 'remove_path':$this->removePath = $value;$this->removePath = str_replace('\\', '/', $this->removePath);$this->removePath = rtrim($this->removePath, '/');if (!empty($this->removePath)){$this->removePath .= '/';}break;case 'rename_files':$this->renameFiles = $value;break;case 'rename_dirs':$this->renameDirs = $value;break;case 'skip_files':$this->skipFiles = $value;break;case 'ignoredirectories':$this->ignoreDirectories = $value;break;}}}$this->scanArchives();$this->readArchiveHeader();$errMessage = $this->getError();if (!empty($errMessage)){$this->setState('error', $errMessage);}else{$this->runState = AK_STATE_NOFILE;$this->setState('prepared');}}private function scanArchives(){if (defined('KSDEBUG')){@unlink('debug.txt');}debugMsg('Preparing to scan archives');$privateArchiveList = array();$dirname         = dirname($this->filename);$base_extension  = $this->getBaseExtension();$basename        = basename($this->filename, $base_extension);$this->totalSize = 0;$count             = 0;$found             = true;$this->archiveList = array();while ($found){++$count;$extension = substr($base_extension, 0, 2) . sprintf('%02d', $count);$filename  = $dirname . DIRECTORY_SEPARATOR . $basename . $extension;$found     = file_exists($filename);if ($found){debugMsg('- Found archive ' . $filename);$this->archiveList[] = $filename;$filesize = @filesize($filename);$this->totalSize += $filesize;$privateArchiveList[] = array($filename, $filesize);}else{debugMsg('- Found archive ' . $this->filename);$this->archiveList[] = $this->filename;$filename = $this->filename;$filesize = @filesize($filename);$this->totalSize += $filesize;$privateArchiveList[] = array($filename, $filesize);}}debugMsg('Total archive parts: ' . $count);$this->currentPartNumber = -1;$this->currentPartOffset = 0;$this->runState          = AK_STATE_NOFILE;$message                     = new stdClass;$message->type               = 'totalsize';$message->content            = new stdClass;$message->content->totalsize = $this->totalSize;$message->content->filelist  = $privateArchiveList;$this->notify($message);}private function getBaseExtension(){static $baseextension;if (empty($baseextension)){$basename      = basename($this->filename);$lastdot       = strrpos($basename, '.');$baseextension = substr($basename, $lastdot);}return $baseextension;}protected abstract function readArchiveHeader();protected function _run(){if ($this->getState() == 'postrun'){return;}$this->setState('running');$timer = AKFactory::getTimer();$status = true;while ($status && ($timer->getTimeLeft() > 0)){switch ($this->runState){case AK_STATE_NOFILE:debugMsg(__CLASS__ . '::_run() - Reading file header');$status = $this->readFileHeader();if ($status){$message          = new stdClass;$message->type    = 'startfile';$message->content = new stdClass;if (array_key_exists('realfile', get_object_vars($this->fileHeader))){$message->content->realfile = $this->fileHeader->realFile;}else{$message->content->realfile = $this->fileHeader->file;}$message->content->file = $this->fileHeader->file;if (array_key_exists('compressed', get_object_vars($this->fileHeader))){$message->content->compressed = $this->fileHeader->compressed;}else{$message->content->compressed = 0;}$message->content->uncompressed = $this->fileHeader->uncompressed;debugMsg(__CLASS__ . '::_run() - Preparing to extract ' . $message->content->realfile);$this->notify($message);}else{debugMsg(__CLASS__ . '::_run() - Could not read file header');}break;case AK_STATE_HEADER:case AK_STATE_DATA:debugMsg(__CLASS__ . '::_run() - Processing file data');$status = $this->processFileData();break;case AK_STATE_DATAREAD:case AK_STATE_POSTPROC:debugMsg(__CLASS__ . '::_run() - Calling post-processing class');$this->postProcEngine->timestamp = $this->fileHeader->timestamp;$status                          = $this->postProcEngine->process();$this->propagateFromObject($this->postProcEngine);$this->runState = AK_STATE_DONE;break;case AK_STATE_DONE:default:if ($status){debugMsg(__CLASS__ . '::_run() - Finished extracting file');$message          = new stdClass;$message->type    = 'endfile';$message->content = new stdClass;if (array_key_exists('realfile', get_object_vars($this->fileHeader))){$message->content->realfile = $this->fileHeader->realFile;}else{$message->content->realfile = $this->fileHeader->file;}$message->content->file = $this->fileHeader->file;if (array_key_exists('compressed', get_object_vars($this->fileHeader))){$message->content->compressed = $this->fileHeader->compressed;}else{$message->content->compressed = 0;}$message->content->uncompressed = $this->fileHeader->uncompressed;$this->notify($message);}$this->runState = AK_STATE_NOFILE;continue;}}$error = $this->getError();if (!$status && ($this->runState == AK_STATE_NOFILE) && empty($error)){debugMsg(__CLASS__ . '::_run() - Just finished');$this->setState('postrun');}elseif (!empty($error)){debugMsg(__CLASS__ . '::_run() - Halted with an error:');debugMsg($error);$this->setState('error', $error);}}protected abstract function readFileHeader();protected abstract function processFileData();protected function _finalize(){$this->setState('finished');}protected function nextFile(){debugMsg('Current part is ' . $this->currentPartNumber . '; opening the next part');++$this->currentPartNumber;if ($this->currentPartNumber > (count($this->archiveList) - 1)){$this->setState('postrun');return false;}else{if (is_resource($this->fp)){@fclose($this->fp);}debugMsg('Opening file ' . $this->archiveList[$this->currentPartNumber]);$this->fp = @fopen($this->archiveList[$this->currentPartNumber], 'rb');if ($this->fp === false){debugMsg('Could not open file - crash imminent');$this->setError(AKText::sprintf('ERR_COULD_NOT_OPEN_ARCHIVE_PART', $this->archiveList[$this->currentPartNumber]));}fseek($this->fp, 0);$this->currentPartOffset = 0;return true;}}protected function isEOF($local = false){$eof = @feof($this->fp);if (!$eof){$position = @ftell($this->fp);$filesize = @filesize($this->archiveList[$this->currentPartNumber]);if ($filesize <= 0){$eof = false;}elseif ($position >= $filesize){$eof = true;}}if ($local){return $eof;}else{return $eof && ($this->currentPartNumber >= (count($this->archiveList) - 1));}}protected function setCorrectPermissions($path){static $rootDir = null;if (is_null($rootDir)){$rootDir = rtrim(AKFactory::get('kickstart.setup.destdir', ''), '/\\');}$directory = rtrim(dirname($path), '/\\');if ($directory != $rootDir){if (!is_writeable($directory)){$this->postProcEngine->chmod($directory, 0755);}}$this->postProcEngine->chmod($path, 0644);}protected function fread($fp, $length = null){if (is_numeric($length)){if ($length > 0){$data = fread($fp, $length);}else{$data = fread($fp, PHP_INT_MAX);}}else{$data = fread($fp, PHP_INT_MAX);}if ($data === false){$data = '';}$message                  = new stdClass;$message->type            = 'reading';$message->content         = new stdClass;$message->content->length = strlen($data);$this->notify($message);return $data;}protected function removePath($path){if (empty($this->removePath)){return $path;}if (strpos($path, $this->removePath) === 0){$path = substr($path, strlen($this->removePath));$path = ltrim($path, '/\\');}return $path;}}

abstract class AKAbstractPostproc extends AKAbstractObject{public $timestamp = 0;protected $filename = null;protected $perms = 0755;protected $tempFilename = null;abstract public function process();abstract public function processFilename($filename, $perms = 0755);abstract public function createDirRecursive($dirName, $perms);abstract public function chmod($file, $perms);abstract public function unlink($file);abstract public function rmdir($directory);abstract public function rename($from, $to);}

abstract class AKAbstractPartObserver{abstract public function update($object, $message);}

class AKPostprocDirect extends AKAbstractPostproc{public function process(){$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);if ($restorePerms){@chmod($this->filename, $this->perms);}else{if (@is_file($this->filename)){@chmod($this->filename, 0644);}else{@chmod($this->filename, 0755);}}if ($this->timestamp > 0){@touch($this->filename, $this->timestamp);}return true;}public function processFilename($filename, $perms = 0755){$this->perms    = $perms;$this->filename = $filename;return $filename;}public function createDirRecursive($dirName, $perms){if (AKFactory::get('kickstart.setup.dryrun', '0')){return true;}if (@mkdir($dirName, 0755, true)){@chmod($dirName, 0755);return true;}$root = AKFactory::get('kickstart.setup.destdir');$root = rtrim(str_replace('\\', '/', $root), '/');$dir  = rtrim(str_replace('\\', '/', $dirName), '/');if (strpos($dir, $root) === 0){$dir = ltrim(substr($dir, strlen($root)), '/');$root .= '/';}else{$root = '';}if (empty($dir)){return true;}$dirArray = explode('/', $dir);$path     = '';foreach ($dirArray as $dir){$path .= $dir . '/';$ret = is_dir($root . $path) ? true : @mkdir($root . $path);if (!$ret){if (is_file($root . $path)){@unlink($root . $path);$ret = @mkdir($root . $path);}if (!$ret){$this->setError(AKText::sprintf('COULDNT_CREATE_DIR', $path));return false;}}@chmod($root . $path, $perms);}return true;}public function chmod($file, $perms){if (AKFactory::get('kickstart.setup.dryrun', '0')){return true;}return @chmod($file, $perms);}public function unlink($file){return @unlink($file);}public function rmdir($directory){return @rmdir($directory);}public function rename($from, $to){return @rename($from, $to);}}

class AKPostprocFTP extends AKAbstractPostproc{public $useSSL = false;public $passive = true;public $host = '';public $port = 21;public $user = '';public $pass = '';public $dir = '';private $handle = null;private $tempDir = '';public function __construct(){parent::__construct();$this->useSSL  = AKFactory::get('kickstart.ftp.ssl', false);$this->passive = AKFactory::get('kickstart.ftp.passive', true);$this->host    = AKFactory::get('kickstart.ftp.host', '');$this->port    = AKFactory::get('kickstart.ftp.port', 21);if (trim($this->port) == ''){$this->port = 21;}$this->user    = AKFactory::get('kickstart.ftp.user', '');$this->pass    = AKFactory::get('kickstart.ftp.pass', '');$this->dir     = AKFactory::get('kickstart.ftp.dir', '');$this->tempDir = AKFactory::get('kickstart.ftp.tempdir', '');$connected = $this->connect();if ($connected){if (!empty($this->tempDir)){$tempDir  = rtrim($this->tempDir, '/\\') . '/';$writable = $this->isDirWritable($tempDir);}else{$tempDir  = '';$writable = false;}if (!$writable){$tempDir = KSROOTDIR;if (empty($tempDir)){$tempDir = '.';}$absoluteDirToHere = $tempDir;$tempDir           = rtrim(str_replace('\\', '/', $tempDir), '/');if (!empty($tempDir)){$tempDir .= '/';}$this->tempDir = $tempDir;$writable = $this->isDirWritable($tempDir);}if (!$writable){$tempDir                 = $absoluteDirToHere . '/kicktemp';$trustMeIKnowWhatImDoing = 500 + 10 + 1; $this->createDirRecursive($tempDir, $trustMeIKnowWhatImDoing);$this->fixPermissions($tempDir);$writable = $this->isDirWritable($tempDir);}if (!$writable){$userdir = AKFactory::get('kickstart.ftp.tempdir', '');if (!empty($userdir)){$absolute = false;$absolute = $absolute || (substr($userdir, 0, 1) == '/');$absolute = $absolute || (substr($userdir, 1, 1) == ':');$absolute = $absolute || (substr($userdir, 2, 1) == ':');if (!$absolute){$tempDir = $absoluteDirToHere . $userdir;}else{$tempDir = $userdir;}if (is_dir($tempDir)){$writable = $this->isDirWritable($tempDir);}}}$this->tempDir = $tempDir;if (!$writable){$this->setError(AKText::_('FTP_TEMPDIR_NOT_WRITABLE'));}else{AKFactory::set('kickstart.ftp.tempdir', $tempDir);$this->tempDir = $tempDir;}}}public function connect(){if ($this->useSSL){$this->handle = @ftp_ssl_connect($this->host, $this->port);}else{$this->handle = @ftp_connect($this->host, $this->port);}if ($this->handle === false){$this->setError(AKText::_('WRONG_FTP_HOST'));return false;}if (!@ftp_login($this->handle, $this->user, $this->pass)){$this->setError(AKText::_('WRONG_FTP_USER'));@ftp_close($this->handle);return false;}if (!@ftp_chdir($this->handle, $this->dir)){$this->setError(AKText::_('WRONG_FTP_PATH1'));@ftp_close($this->handle);return false;}if ($this->passive){@ftp_pasv($this->handle, true);}else{@ftp_pasv($this->handle, false);}$testFilename = defined('KSSELFNAME') ? KSSELFNAME : basename(__FILE__);$tempHandle   = fopen('php://temp', 'r+');if (@ftp_fget($this->handle, $tempHandle, $testFilename, FTP_ASCII, 0) === false){$this->setError(AKText::_('WRONG_FTP_PATH2'));@ftp_close($this->handle);fclose($tempHandle);return false;}fclose($tempHandle);return true;}private function isDirWritable($dir){$fp = @fopen($dir . '/kickstart.dat', 'wb');if ($fp === false){return false;}else{@fclose($fp);unlink($dir . '/kickstart.dat');return true;}}public function createDirRecursive($dirName, $perms){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$removePath = str_replace('\\', '/', $removePath);$dirName    = str_replace('\\', '/', $dirName);$removePath = rtrim($removePath, '/\\') . '/';$dirName    = rtrim($dirName, '/\\') . '/';$left = substr($dirName, 0, strlen($removePath));if ($left == $removePath){$dirName = substr($dirName, strlen($removePath));}}if (empty($dirName)){$dirName = '';} $check = '/' . trim($this->dir, '/') . '/' . trim($dirName, '/');if ($this->is_dir($check)){return true;}$alldirs     = explode('/', $dirName);$previousDir = '/' . trim($this->dir);foreach ($alldirs as $curdir){$check = $previousDir . '/' . $curdir;if (!$this->is_dir($check)){@ftp_delete($this->handle, $check);if (@ftp_mkdir($this->handle, $check) === false){$this->fixPermissions($removePath . $check);if (@ftp_mkdir($this->handle, $check) === false){if (!@mkdir($check)){$this->setError(AKText::sprintf('FTP_CANT_CREATE_DIR', $check));return false;}else{$trustMeIKnowWhatImDoing =500 + 10 + 1; @chmod($check, $trustMeIKnowWhatImDoing);return true;}}}@ftp_chmod($this->handle, $perms, $check);}$previousDir = $check;}return true;}private function is_dir($dir){return @ftp_chdir($this->handle, $dir);}private function fixPermissions($path){if (!defined('KSDEBUG')){$oldErrorReporting = @error_reporting(E_NONE);}$relPath  = str_replace('\\', '/', $path);$basePath = rtrim(str_replace('\\', '/', KSROOTDIR), '/');$basePath = rtrim($basePath, '/');if (!empty($basePath)){$basePath .= '/';}if (substr($relPath, 0, strlen($basePath)) == $basePath){$relPath = substr($relPath, strlen($basePath));}$dirArray  = explode('/', $relPath);$pathBuilt = rtrim($basePath, '/');foreach ($dirArray as $dir){if (empty($dir)){continue;}$oldPath = $pathBuilt;$pathBuilt .= '/' . $dir;if (is_dir($oldPath . $dir)){$trustMeIKnowWhatImDoing = 500 + 10 + 1; @chmod($oldPath . $dir, $trustMeIKnowWhatImDoing);}else{$trustMeIKnowWhatImDoing = 500 + 10 + 1; if (@chmod($oldPath . $dir, $trustMeIKnowWhatImDoing) === false){@unlink($oldPath . $dir);}}}if (!defined('KSDEBUG')){@error_reporting($oldErrorReporting);}}function __wakeup(){$this->connect();}public function process(){if (is_null($this->tempFilename)){return true;}$remotePath = dirname($this->filename);$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$removePath = ltrim($removePath, "/");$remotePath = ltrim($remotePath, "/");$left       = substr($remotePath, 0, strlen($removePath));if ($left == $removePath){$remotePath = substr($remotePath, strlen($removePath));}}$absoluteFSPath  = dirname($this->filename);$relativeFTPPath = trim($remotePath, '/');$absoluteFTPPath = '/' . trim($this->dir, '/') . '/' . trim($remotePath, '/');$onlyFilename    = basename($this->filename);$remoteName = $absoluteFTPPath . '/' . $onlyFilename;$ret = @ftp_chdir($this->handle, $absoluteFTPPath);if ($ret === false){$ret = $this->createDirRecursive($absoluteFSPath, 0755);if ($ret === false){$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));return false;}$ret = @ftp_chdir($this->handle, $absoluteFTPPath);if ($ret === false){$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));return false;}}$ret = @ftp_put($this->handle, $remoteName, $this->tempFilename, FTP_BINARY);if ($ret === false){$this->fixPermissions($this->filename);$this->unlink($this->filename);$fp = @fopen($this->tempFilename, 'rb');if ($fp !== false){$ret = @ftp_fput($this->handle, $remoteName, $fp, FTP_BINARY);@fclose($fp);}else{$ret = false;}}@unlink($this->tempFilename);if ($ret === false){$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));return false;}$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);if ($restorePerms){@ftp_chmod($this->_handle, $this->perms, $remoteName);}else{@ftp_chmod($this->_handle, 0644, $remoteName);}return true;}public function unlink($file){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($file, 0, strlen($removePath));if ($left == $removePath){$file = substr($file, strlen($removePath));}}$check = '/' . trim($this->dir, '/') . '/' . trim($file, '/');return @ftp_delete($this->handle, $check);}public function processFilename($filename, $perms = 0755){if ($this->getError()){return false;}if (is_null($filename)){$this->filename     = null;$this->tempFilename = null;return null;}$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($filename, 0, strlen($removePath));if ($left == $removePath){$filename = substr($filename, strlen($removePath));}}$filename = ltrim($filename, '/');$this->filename     = $filename;$this->tempFilename = tempnam($this->tempDir, 'kickstart-');$this->perms        = $perms;if (empty($this->tempFilename)){$this->tempFilename = $this->tempDir . '/kickstart-' . time() . '.dat';}return $this->tempFilename;}public function close(){@ftp_close($this->handle);}public function chmod($file, $perms){return @ftp_chmod($this->handle, $perms, $file);}public function rmdir($directory){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($directory, 0, strlen($removePath));if ($left == $removePath){$directory = substr($directory, strlen($removePath));}}$check = '/' . trim($this->dir, '/') . '/' . trim($directory, '/');return @ftp_rmdir($this->handle, $check);}public function rename($from, $to){$originalFrom = $from;$originalTo   = $to;$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($from, 0, strlen($removePath));if ($left == $removePath){$from = substr($from, strlen($removePath));}}$from = '/' . trim($this->dir, '/') . '/' . trim($from, '/');if (!empty($removePath)){$left = substr($to, 0, strlen($removePath));if ($left == $removePath){$to = substr($to, strlen($removePath));}}$to = '/' . trim($this->dir, '/') . '/' . trim($to, '/');$result = @ftp_rename($this->handle, $from, $to);if ($result !== true){return @rename($from, $to);}else{return true;}}}

class AKPostprocSFTP extends AKAbstractPostproc{public $useSSL = false;public $passive = true;public $host = '';public $port = 21;public $user = '';public $pass = '';public $dir = '';private $handle = null;private $_connection = null;private $_currentdir;private $tempDir = '';public function __construct(){parent::__construct();$this->host = AKFactory::get('kickstart.ftp.host', '');$this->port = AKFactory::get('kickstart.ftp.port', 22);if (trim($this->port) == ''){$this->port = 22;}$this->user    = AKFactory::get('kickstart.ftp.user', '');$this->pass    = AKFactory::get('kickstart.ftp.pass', '');$this->dir     = AKFactory::get('kickstart.ftp.dir', '');$this->tempDir = AKFactory::get('kickstart.ftp.tempdir', '');$connected = $this->connect();if ($connected){if (!empty($this->tempDir)){$tempDir  = rtrim($this->tempDir, '/\\') . '/';$writable = $this->isDirWritable($tempDir);}else{$tempDir  = '';$writable = false;}if (!$writable){$tempDir = KSROOTDIR;if (empty($tempDir)){$tempDir = '.';}$absoluteDirToHere = $tempDir;$tempDir           = rtrim(str_replace('\\', '/', $tempDir), '/');if (!empty($tempDir)){$tempDir .= '/';}$this->tempDir = $tempDir;$writable = $this->isDirWritable($tempDir);}if (!$writable){$tempDir                 = $absoluteDirToHere . '/kicktemp';$trustMeIKnowWhatImDoing = 500 + 10 + 1; $this->createDirRecursive($tempDir, $trustMeIKnowWhatImDoing);$this->fixPermissions($tempDir);$writable = $this->isDirWritable($tempDir);}if (!$writable){$userdir = AKFactory::get('kickstart.ftp.tempdir', '');if (!empty($userdir)){$absolute = false;$absolute = $absolute || (substr($userdir, 0, 1) == '/');$absolute = $absolute || (substr($userdir, 1, 1) == ':');$absolute = $absolute || (substr($userdir, 2, 1) == ':');if (!$absolute){$tempDir = $absoluteDirToHere . $userdir;}else{$tempDir = $userdir;}if (is_dir($tempDir)){$writable = $this->isDirWritable($tempDir);}}}$this->tempDir = $tempDir;if (!$writable){$this->setError(AKText::_('SFTP_TEMPDIR_NOT_WRITABLE'));}else{AKFactory::set('kickstart.ftp.tempdir', $tempDir);$this->tempDir = $tempDir;}}}public function connect(){$this->_connection = false;if (!function_exists('ssh2_connect')){$this->setError(AKText::_('SFTP_NO_SSH2'));return false;}$this->_connection = @ssh2_connect($this->host, $this->port);if (!@ssh2_auth_password($this->_connection, $this->user, $this->pass)){$this->setError(AKText::_('SFTP_WRONG_USER'));$this->_connection = false;return false;}$this->handle = @ssh2_sftp($this->_connection);if (!$this->dir){$this->setError(AKText::_('SFTP_WRONG_STARTING_DIR'));return false;}if (!$this->sftp_chdir('/')){$this->setError(AKText::_('SFTP_WRONG_STARTING_DIR'));unset($this->_connection);unset($this->handle);return false;}$testFilename = defined('KSSELFNAME') ? KSSELFNAME : basename(__FILE__);$basePath     = '/' . trim($this->dir, '/');if (@fopen("ssh2.sftp://{$this->handle}$basePath/$testFilename", 'r+') === false){$this->setError(AKText::_('SFTP_WRONG_STARTING_DIR'));unset($this->_connection);unset($this->handle);return false;}return true;}private function sftp_chdir($dir){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$removePath = str_replace('\\', '/', $removePath);$dir        = str_replace('\\', '/', $dir);$removePath = rtrim($removePath, '/\\') . '/';$dir        = rtrim($dir, '/\\') . '/';$left = substr($dir, 0, strlen($removePath));if ($left == $removePath){$dir = substr($dir, strlen($removePath));}}if (empty($dir)){$dir = '';}$realdir = substr($this->dir, -1) == '/' ? substr($this->dir, 0, strlen($this->dir) - 1) : $this->dir;$realdir .= '/' . $dir;$realdir = substr($realdir, 0, 1) == '/' ? $realdir : '/' . $realdir;if ($this->_currentdir == $realdir){return true;}$result = @ssh2_sftp_stat($this->handle, $realdir);if ($result === false){return false;}else{$this->_currentdir = $realdir;return true;}}private function isDirWritable($dir){if (@fopen("ssh2.sftp://{$this->handle}$dir/kickstart.dat", 'wb') === false){return false;}else{@ssh2_sftp_unlink($this->handle, $dir . '/kickstart.dat');return true;}}public function createDirRecursive($dirName, $perms){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$removePath = str_replace('\\', '/', $removePath);$dirName    = str_replace('\\', '/', $dirName);$removePath = rtrim($removePath, '/\\') . '/';$dirName    = rtrim($dirName, '/\\') . '/';$left = substr($dirName, 0, strlen($removePath));if ($left == $removePath){$dirName = substr($dirName, strlen($removePath));}}if (empty($dirName)){$dirName = '';} $check = '/' . trim($this->dir, '/ ') . '/' . trim($dirName, '/');if ($this->is_dir($check)){return true;}$alldirs     = explode('/', $dirName);$previousDir = '/' . trim($this->dir, '/ ');foreach ($alldirs as $curdir){if (!$curdir){continue;}$check = $previousDir . '/' . $curdir;if (!$this->is_dir($check)){@ssh2_sftp_unlink($this->handle, $check);if (@ssh2_sftp_mkdir($this->handle, $check) === false){$this->fixPermissions($check);if (@ssh2_sftp_mkdir($this->handle, $check) === false){if (!@mkdir($check)){$this->setError(AKText::sprintf('FTP_CANT_CREATE_DIR', $check));return false;}else{$trustMeIKnowWhatImDoing =500 + 10 + 1; @chmod($check, $trustMeIKnowWhatImDoing);return true;}}}@ssh2_sftp_chmod($this->handle, $check, $perms);}$previousDir = $check;}return true;}private function is_dir($dir){return $this->sftp_chdir($dir);}private function fixPermissions($path){if (!defined('KSDEBUG')){$oldErrorReporting = @error_reporting(E_NONE);}$relPath  = str_replace('\\', '/', $path);$basePath = rtrim(str_replace('\\', '/', KSROOTDIR), '/');$basePath = rtrim($basePath, '/');if (!empty($basePath)){$basePath .= '/';}if (substr($relPath, 0, strlen($basePath)) == $basePath){$relPath = substr($relPath, strlen($basePath));}$dirArray  = explode('/', $relPath);$pathBuilt = rtrim($basePath, '/');foreach ($dirArray as $dir){if (empty($dir)){continue;}$oldPath = $pathBuilt;$pathBuilt .= '/' . $dir;if (is_dir($oldPath . '/' . $dir)){$trustMeIKnowWhatImDoing = 500 + 10 + 1; @chmod($oldPath . '/' . $dir, $trustMeIKnowWhatImDoing);}else{$trustMeIKnowWhatImDoing = 500 + 10 + 1; if (@chmod($oldPath . '/' . $dir, $trustMeIKnowWhatImDoing) === false){@unlink($oldPath . $dir);}}}if (!defined('KSDEBUG')){@error_reporting($oldErrorReporting);}}function __wakeup(){$this->connect();}public function process(){if (is_null($this->tempFilename)){return true;}$remotePath      = dirname($this->filename);$absoluteFSPath  = dirname($this->filename);$absoluteFTPPath = '/' . trim($this->dir, '/') . '/' . trim($remotePath, '/');$onlyFilename    = basename($this->filename);$remoteName = $absoluteFTPPath . '/' . $onlyFilename;$ret = $this->sftp_chdir($absoluteFTPPath);if ($ret === false){$ret = $this->createDirRecursive($absoluteFSPath, 0755);if ($ret === false){$this->setError(AKText::sprintf('SFTP_COULDNT_UPLOAD', $this->filename));return false;}$ret = $this->sftp_chdir($absoluteFTPPath);if ($ret === false){$this->setError(AKText::sprintf('SFTP_COULDNT_UPLOAD', $this->filename));return false;}}$ret = $this->write($this->tempFilename, $remoteName);if ($ret === -1){$this->setError(AKText::sprintf('SFTP_COULDNT_UPLOAD', $this->filename));return false;}if ($ret === false){$this->fixPermissions($this->filename);$this->unlink($this->filename);$ret = $this->write($this->tempFilename, $remoteName);}@unlink($this->tempFilename);if ($ret === false){$this->setError(AKText::sprintf('SFTP_COULDNT_UPLOAD', $this->filename));return false;}$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);if ($restorePerms){$this->chmod($remoteName, $this->perms);}else{$this->chmod($remoteName, 0644);}return true;}private function write($local, $remote){$fp      = @fopen("ssh2.sftp://{$this->handle}$remote", 'w');$localfp = @fopen($local, 'rb');if ($fp === false){return -1;}if ($localfp === false){@fclose($fp);return -1;}$res = true;while (!feof($localfp) && ($res !== false)){$buffer = @fread($localfp, 65567);$res    = @fwrite($fp, $buffer);}@fclose($fp);@fclose($localfp);return $res;}public function unlink($file){$check = '/' . trim($this->dir, '/') . '/' . trim($file, '/');return @ssh2_sftp_unlink($this->handle, $check);}public function chmod($file, $perms){return @ssh2_sftp_chmod($this->handle, $file, $perms);}public function processFilename($filename, $perms = 0755){if ($this->getError()){return false;}if (is_null($filename)){$this->filename     = null;$this->tempFilename = null;return null;}$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($filename, 0, strlen($removePath));if ($left == $removePath){$filename = substr($filename, strlen($removePath));}}$filename = ltrim($filename, '/');$this->filename     = $filename;$this->tempFilename = tempnam($this->tempDir, 'kickstart-');$this->perms        = $perms;if (empty($this->tempFilename)){$this->tempFilename = $this->tempDir . '/kickstart-' . time() . '.dat';}return $this->tempFilename;}public function close(){unset($this->_connection);unset($this->handle);}public function rmdir($directory){$check = '/' . trim($this->dir, '/') . '/' . trim($directory, '/');return @ssh2_sftp_rmdir($this->handle, $check);}public function rename($from, $to){$from = '/' . trim($this->dir, '/') . '/' . trim($from, '/');$to   = '/' . trim($this->dir, '/') . '/' . trim($to, '/');$result = @ssh2_sftp_rename($this->handle, $from, $to);if ($result !== true){return @rename($from, $to);}else{return true;}}}

class AKPostprocHybrid extends AKAbstractPostproc{public $useFTP = false;public $useSSL = false;public $passive = true;public $host = '';public $port = 21;public $user = '';public $pass = '';public $dir = '';private $handle = null;private $tempDir = '';private $_handle = null;public function __construct(){parent::__construct();$this->useFTP  = true;$this->useSSL  = AKFactory::get('kickstart.ftp.ssl', false);$this->passive = AKFactory::get('kickstart.ftp.passive', true);$this->host    = AKFactory::get('kickstart.ftp.host', '');$this->port    = AKFactory::get('kickstart.ftp.port', 21);$this->user    = AKFactory::get('kickstart.ftp.user', '');$this->pass    = AKFactory::get('kickstart.ftp.pass', '');$this->dir     = AKFactory::get('kickstart.ftp.dir', '');$this->tempDir = AKFactory::get('kickstart.ftp.tempdir', '');if (trim($this->port) == ''){$this->port = 21;}if (empty($this->host) || empty($this->user) || empty($this->pass)){$this->useFTP = false;}$connected = $this->connect();if (!$connected){$this->useFTP = false;}if ($connected){if (!empty($this->tempDir)){$tempDir  = rtrim($this->tempDir, '/\\') . '/';$writable = $this->isDirWritable($tempDir);}else{$tempDir  = '';$writable = false;}if (!$writable){$tempDir = KSROOTDIR;if (empty($tempDir)){$tempDir = '.';}$absoluteDirToHere = $tempDir;$tempDir           = rtrim(str_replace('\\', '/', $tempDir), '/');if (!empty($tempDir)){$tempDir .= '/';}$this->tempDir = $tempDir;$writable = $this->isDirWritable($tempDir);}if (!$writable){$tempDir                 = $absoluteDirToHere . '/kicktemp';$trustMeIKnowWhatImDoing = 500 + 10 + 1; $this->createDirRecursive($tempDir, $trustMeIKnowWhatImDoing);$this->fixPermissions($tempDir);$writable = $this->isDirWritable($tempDir);}if (!$writable){$userdir = AKFactory::get('kickstart.ftp.tempdir', '');if (!empty($userdir)){$absolute = false;$absolute = $absolute || (substr($userdir, 0, 1) == '/');$absolute = $absolute || (substr($userdir, 1, 1) == ':');$absolute = $absolute || (substr($userdir, 2, 1) == ':');if (!$absolute){$tempDir = $absoluteDirToHere . $userdir;}else{$tempDir = $userdir;}if (is_dir($tempDir)){$writable = $this->isDirWritable($tempDir);}}}$this->tempDir = $tempDir;if (!$writable){$this->setError(AKText::_('FTP_TEMPDIR_NOT_WRITABLE'));}else{AKFactory::set('kickstart.ftp.tempdir', $tempDir);$this->tempDir = $tempDir;}}}public function connect(){if (!$this->useFTP){return false;}if ($this->useSSL){$this->handle = @ftp_ssl_connect($this->host, $this->port);}else{$this->handle = @ftp_connect($this->host, $this->port);}if ($this->handle === false){$this->setError(AKText::_('WRONG_FTP_HOST'));return false;}if (!@ftp_login($this->handle, $this->user, $this->pass)){$this->setError(AKText::_('WRONG_FTP_USER'));@ftp_close($this->handle);return false;}if (!@ftp_chdir($this->handle, $this->dir)){$this->setError(AKText::_('WRONG_FTP_PATH1'));@ftp_close($this->handle);return false;}if ($this->passive){@ftp_pasv($this->handle, true);}else{@ftp_pasv($this->handle, false);}$testFilename = defined('KSSELFNAME') ? KSSELFNAME : basename(__FILE__);$tempHandle   = fopen('php://temp', 'r+');if (@ftp_fget($this->handle, $tempHandle, $testFilename, FTP_ASCII, 0) === false){$this->setError(AKText::_('WRONG_FTP_PATH2'));@ftp_close($this->handle);fclose($tempHandle);return false;}fclose($tempHandle);return true;}private function isDirWritable($dir){$fp = @fopen($dir . '/kickstart.dat', 'wb');if ($fp === false){return false;}@fclose($fp);unlink($dir . '/kickstart.dat');return true;}public function createDirRecursive($dirName, $perms){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$removePath = str_replace('\\', '/', $removePath);$dirName    = str_replace('\\', '/', $dirName);$removePath = rtrim($removePath, '/\\') . '/';$dirName    = rtrim($dirName, '/\\') . '/';$left = substr($dirName, 0, strlen($removePath));if ($left == $removePath){$dirName = substr($dirName, strlen($removePath));}}if (empty($dirName)){$dirName = '';}$check   = '/' . trim($this->dir, '/') . '/' . trim($dirName, '/');$checkFS = $removePath . trim($dirName, '/');if ($this->is_dir($check)){return true;}$alldirs       = explode('/', $dirName);$previousDir   = '/' . trim($this->dir);$previousDirFS = rtrim($removePath, '/\\');foreach ($alldirs as $curdir){$check   = $previousDir . '/' . $curdir;$checkFS = $previousDirFS . '/' . $curdir;if (!is_dir($checkFS) && !$this->is_dir($check)){if (!@unlink($checkFS) && $this->useFTP){@ftp_delete($this->handle, $check);}$createdDir = @mkdir($checkFS, 0755);if (!$createdDir && $this->useFTP){$createdDir = @ftp_mkdir($this->handle, $check);}if ($createdDir === false){$this->fixPermissions($checkFS);$createdDir = @mkdir($checkFS, 0755);if (!$createdDir && $this->useFTP){$createdDir = @ftp_mkdir($this->handle, $check);}if ($createdDir === false){$this->setError(AKText::sprintf('FTP_CANT_CREATE_DIR', $check));return false;}}if (!@chmod($checkFS, $perms) && $this->useFTP){@ftp_chmod($this->handle, $perms, $check);}}$previousDir   = $check;$previousDirFS = $checkFS;}return true;}private function is_dir($dir){if ($this->useFTP){return @ftp_chdir($this->handle, $dir);}return false;}private function fixPermissions($path){if (!defined('KSDEBUG')){$oldErrorReporting = @error_reporting(E_NONE);}$relPath  = str_replace('\\', '/', $path);$basePath = rtrim(str_replace('\\', '/', KSROOTDIR), '/');$basePath = rtrim($basePath, '/');if (!empty($basePath)){$basePath .= '/';}if (substr($relPath, 0, strlen($basePath)) == $basePath){$relPath = substr($relPath, strlen($basePath));}$dirArray  = explode('/', $relPath);$pathBuilt = rtrim($basePath, '/');foreach ($dirArray as $dir){if (empty($dir)){continue;}$oldPath = $pathBuilt;$pathBuilt .= '/' . $dir;if (is_dir($oldPath . $dir)){$trustMeIKnowWhatImDoing = 500 + 10 + 1; @chmod($oldPath . $dir, $trustMeIKnowWhatImDoing);}else{$trustMeIKnowWhatImDoing = 500 + 10 + 1; if (@chmod($oldPath . $dir, $trustMeIKnowWhatImDoing) === false){@unlink($oldPath . $dir);}}}if (!defined('KSDEBUG')){@error_reporting($oldErrorReporting);}}function __wakeup(){if ($this->useFTP){$this->connect();}}function __destruct(){if (!$this->useFTP){@ftp_close($this->handle);}}public function process(){if (is_null($this->tempFilename)){return true;}$remotePath = dirname($this->filename);$removePath = AKFactory::get('kickstart.setup.destdir', '');$root       = rtrim($removePath, '/\\');if (!empty($removePath)){$removePath = ltrim($removePath, "/");$remotePath = ltrim($remotePath, "/");$left       = substr($remotePath, 0, strlen($removePath));if ($left == $removePath){$remotePath = substr($remotePath, strlen($removePath));}}$absoluteFSPath  = dirname($this->filename);$relativeFTPPath = trim($remotePath, '/');$absoluteFTPPath = '/' . trim($this->dir, '/') . '/' . trim($remotePath, '/');$onlyFilename    = basename($this->filename);$remoteName = $absoluteFTPPath . '/' . $onlyFilename;if (!is_dir($root . '/' . $absoluteFSPath)){$ret = $this->createDirRecursive($absoluteFSPath, 0755);if (($ret === false) && ($this->useFTP)){$ret = @ftp_chdir($this->handle, $absoluteFTPPath);}if ($ret === false){$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));return false;}}if ($this->useFTP){$ret = @ftp_chdir($this->handle, $absoluteFTPPath);}$ret = @copy($this->tempFilename, $root . '/' . $this->filename);if ($ret === false){$this->fixPermissions($this->filename);$this->unlink($this->filename);$ret = @copy($this->tempFilename, $root . '/' . $this->filename);}if ($this->useFTP && ($ret === false)){$ret = @ftp_put($this->handle, $remoteName, $this->tempFilename, FTP_BINARY);if ($ret === false){$this->fixPermissions($this->filename);$this->unlink($this->filename);$fp = @fopen($this->tempFilename, 'rb');if ($fp !== false){$ret = @ftp_fput($this->handle, $remoteName, $fp, FTP_BINARY);@fclose($fp);}else{$ret = false;}}}@unlink($this->tempFilename);if ($ret === false){$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));return false;}$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);$perms        = $restorePerms ? $this->perms : 0644;$ret = @chmod($root . '/' . $this->filename, $perms);if ($this->useFTP && ($ret === false)){@ftp_chmod($this->_handle, $perms, $remoteName);}return true;}public function unlink($file){$ret = @unlink($file);if (!$ret && $this->useFTP){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($file, 0, strlen($removePath));if ($left == $removePath){$file = substr($file, strlen($removePath));}}$check = '/' . trim($this->dir, '/') . '/' . trim($file, '/');$ret = @ftp_delete($this->handle, $check);}return $ret;}public function processFilename($filename, $perms = 0755){if ($this->getError()){return false;}if (is_null($filename)){$this->filename     = null;$this->tempFilename = null;return null;}$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($filename, 0, strlen($removePath));if ($left == $removePath){$filename = substr($filename, strlen($removePath));}}$filename = ltrim($filename, '/');$this->filename     = $filename;$this->tempFilename = tempnam($this->tempDir, 'kickstart-');$this->perms        = $perms;if (empty($this->tempFilename)){$this->tempFilename = $this->tempDir . '/kickstart-' . time() . '.dat';}return $this->tempFilename;}public function close(){if (!$this->useFTP){@ftp_close($this->handle);}}public function chmod($file, $perms){if (AKFactory::get('kickstart.setup.dryrun', '0')){return true;}$ret = @chmod($file, $perms);if (!$ret && $this->useFTP){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($file, 0, strlen($removePath));if ($left == $removePath){$file = substr($file, strlen($removePath));}}$file = ltrim($file, '/');$ret = @ftp_chmod($this->handle, $perms, $file);}return $ret;}public function rmdir($directory){$ret = @rmdir($directory);if (!$ret && $this->useFTP){$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($directory, 0, strlen($removePath));if ($left == $removePath){$directory = substr($directory, strlen($removePath));}}$check = '/' . trim($this->dir, '/') . '/' . trim($directory, '/');$ret = @ftp_rmdir($this->handle, $check);}return $ret;}public function rename($from, $to){$ret = @rename($from, $to);if (!$ret && $this->useFTP){$originalFrom = $from;$originalTo   = $to;$removePath = AKFactory::get('kickstart.setup.destdir', '');if (!empty($removePath)){$left = substr($from, 0, strlen($removePath));if ($left == $removePath){$from = substr($from, strlen($removePath));}}$from = '/' . trim($this->dir, '/') . '/' . trim($from, '/');if (!empty($removePath)){$left = substr($to, 0, strlen($removePath));if ($left == $removePath){$to = substr($to, strlen($removePath));}}$to = '/' . trim($this->dir, '/') . '/' . trim($to, '/');$ret = @ftp_rename($this->handle, $from, $to);}return $ret;}}

class AKUnarchiverJPA extends AKAbstractUnarchiver{protected $archiveHeaderData = array();protected function readArchiveHeader(){debugMsg('Preparing to read archive header');$this->archiveHeaderData = new stdClass();debugMsg('Opening the first part');$this->nextFile();if ($this->fp === false){debugMsg('Could not open the first part');return false;}$sig = fread($this->fp, 3);if ($sig != 'JPA'){debugMsg('Invalid archive signature');$this->setError(AKText::_('ERR_NOT_A_JPA_FILE'));return false;}$header_length_array = unpack('v', fread($this->fp, 2));$header_length       = $header_length_array[1];$bin_data    = fread($this->fp, 14);$header_data = unpack('Cmajor/Cminor/Vcount/Vuncsize/Vcsize', $bin_data);$rest_length = $header_length - 19;if ($rest_length > 0){$junk = fread($this->fp, $rest_length);}else{$junk = '';}$temp = array('signature'        => $sig,'length'           => $header_length,'major'            => $header_data['major'],'minor'            => $header_data['minor'],'filecount'        => $header_data['count'],'uncompressedsize' => $header_data['uncsize'],'compressedsize'   => $header_data['csize'],'unknowndata'      => $junk);foreach ($temp as $key => $value){$this->archiveHeaderData->{$key} = $value;}debugMsg('Header data:');debugMsg('Length              : ' . $header_length);debugMsg('Major               : ' . $header_data['major']);debugMsg('Minor               : ' . $header_data['minor']);debugMsg('File count          : ' . $header_data['count']);debugMsg('Uncompressed size   : ' . $header_data['uncsize']);debugMsg('Compressed size	  : ' . $header_data['csize']);$this->currentPartOffset = @ftell($this->fp);$this->dataReadLength = 0;return true;}protected function readFileHeader(){if ($this->isEOF(true)){debugMsg('Archive part EOF; moving to next file');$this->nextFile();}$this->currentPartOffset = ftell($this->fp);debugMsg("Reading file signature; part {$this->currentPartNumber}, offset {$this->currentPartOffset}");$signature = fread($this->fp, 3);$this->fileHeader            = new stdClass();$this->fileHeader->timestamp = 0;if ($signature != 'JPF'){if ($this->isEOF(true)){$this->nextFile();if (!$this->isEOF(false)){debugMsg('Invalid file signature before end of archive encountered');$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));return false;}return false;}else{$screwed = true;if (AKFactory::get('kickstart.setup.ignoreerrors', false)){debugMsg('Invalid file block signature; launching heuristic file block signature scanner');$screwed = !$this->heuristicFileHeaderLocator();if (!$screwed){$signature = 'JPF';}else{debugMsg('Heuristics failed. Brace yourself for the imminent crash.');}}if ($screwed){debugMsg('Invalid file block signature');$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));return false;}}}$isBannedFile = false;$length_array = unpack('vblocksize/vpathsize', fread($this->fp, 4));if ($length_array['pathsize'] > 0){$file = fread($this->fp, $length_array['pathsize']);}else{$file = '';}$isRenamed = false;if (is_array($this->renameFiles) && (count($this->renameFiles) > 0)){if (array_key_exists($file, $this->renameFiles)){$file      = $this->renameFiles[$file];$isRenamed = true;}}$isDirRenamed = false;if (is_array($this->renameDirs) && (count($this->renameDirs) > 0)){if (array_key_exists(dirname($file), $this->renameDirs)){$file         = rtrim($this->renameDirs[dirname($file)], '/') . '/' . basename($file);$isRenamed    = true;$isDirRenamed = true;}}$bin_data    = fread($this->fp, 14);$header_data = unpack('Ctype/Ccompression/Vcompsize/Vuncompsize/Vperms', $bin_data);$restBytes = $length_array['blocksize'] - (21 + $length_array['pathsize']);if ($restBytes > 0){while ($restBytes >= 4){$extra_header_data = fread($this->fp, 4);$extra_header      = unpack('vsignature/vlength', $extra_header_data);$restBytes -= 4;$extra_header['length'] -= 4;switch ($extra_header['signature']){case 256:if ($extra_header['length'] > 0){$bindata = fread($this->fp, $extra_header['length']);$restBytes -= $extra_header['length'];$timestamps                  = unpack('Vmodified', substr($bindata, 0, 4));$filectime                   = $timestamps['modified'];$this->fileHeader->timestamp = $filectime;}break;default:if ($extra_header['length'] > 0){$junk = fread($this->fp, $extra_header['length']);$restBytes -= $extra_header['length'];}break;}}if ($restBytes > 0){$junk = fread($this->fp, $restBytes);}}$compressionType = $header_data['compression'];$this->fileHeader->file         = $file;$this->fileHeader->compressed   = $header_data['compsize'];$this->fileHeader->uncompressed = $header_data['uncompsize'];switch ($header_data['type']){case 0:$this->fileHeader->type = 'dir';break;case 1:$this->fileHeader->type = 'file';break;case 2:$this->fileHeader->type = 'link';break;}switch ($compressionType){case 0:$this->fileHeader->compression = 'none';break;case 1:$this->fileHeader->compression = 'gzip';break;case 2:$this->fileHeader->compression = 'bzip2';break;}$this->fileHeader->permissions = $header_data['perms'];if ((basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..")){$isBannedFile = true;}if ((count($this->skipFiles) > 0) && (!$isRenamed)){if (in_array($this->fileHeader->file, $this->skipFiles)){$isBannedFile = true;}}if ($isBannedFile){debugMsg('Skipping file ' . $this->fileHeader->file);$seekleft = $this->fileHeader->compressed;while ($seekleft > 0){$curSize = @filesize($this->archiveList[$this->currentPartNumber]);$curPos  = @ftell($this->fp);$canSeek = $curSize - $curPos;if ($canSeek > $seekleft){$canSeek = $seekleft;}@fseek($this->fp, $canSeek, SEEK_CUR);$seekleft -= $canSeek;if ($seekleft){$this->nextFile();}}$this->currentPartOffset = @ftell($this->fp);$this->runState          = AK_STATE_DONE;return true;}$this->fileHeader->file = $this->removePath($this->fileHeader->file);if (!empty($this->addPath) && !$isDirRenamed){$this->fileHeader->file = $this->addPath . $this->fileHeader->file;}$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);if ($this->fileHeader->type == 'file'){if ($restorePerms){$this->fileHeader->realFile =$this->postProcEngine->processFilename($this->fileHeader->file, $this->fileHeader->permissions);}else{$this->fileHeader->realFile = $this->postProcEngine->processFilename($this->fileHeader->file);}}elseif ($this->fileHeader->type == 'dir'){$dir = $this->fileHeader->file;if ($restorePerms){$this->postProcEngine->createDirRecursive($this->fileHeader->file, $this->fileHeader->permissions);}else{$this->postProcEngine->createDirRecursive($this->fileHeader->file, 0755);}$this->postProcEngine->processFilename(null);}else{$this->postProcEngine->processFilename(null);}$this->createDirectory();$this->runState = AK_STATE_HEADER;$this->dataReadLength = 0;return true;}protected function heuristicFileHeaderLocator(){$ret     = false;$fullEOF = false;while (!$ret && !$fullEOF){$this->currentPartOffset = @ftell($this->fp);if ($this->isEOF(true)){$this->nextFile();}if ($this->isEOF(false)){$fullEOF = true;continue;}$chunk     = fread($this->fp, 524288);$size_read = mb_strlen($chunk, '8bit');$pos = mb_strpos($chunk, 'JPF', 0, '8bit');if ($pos !== false){$this->currentPartOffset += $pos + 3;@fseek($this->fp, $this->currentPartOffset, SEEK_SET);$ret = true;}else{$this->currentPartOffset = @ftell($this->fp);}}return $ret;}protected function createDirectory(){if (AKFactory::get('kickstart.setup.dryrun', '0')){return true;}if (empty($this->fileHeader->realFile)){$this->fileHeader->realFile = $this->fileHeader->file;}$lastSlash = strrpos($this->fileHeader->realFile, '/');$dirName   = substr($this->fileHeader->realFile, 0, $lastSlash);$perms     = $this->flagRestorePermissions ? $this->fileHeader->permissions : 0755;$ignore    = AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($dirName);if (($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore)){$this->setError(AKText::sprintf('COULDNT_CREATE_DIR', $dirName));return false;}else{return true;}}protected function processFileData(){switch ($this->fileHeader->type){case 'dir':return $this->processTypeDir();break;case 'link':return $this->processTypeLink();break;case 'file':switch ($this->fileHeader->compression){case 'none':return $this->processTypeFileUncompressed();break;case 'gzip':case 'bzip2':return $this->processTypeFileCompressedSimple();break;}break;default:debugMsg('Unknown file type ' . $this->fileHeader->type);break;}}private function processTypeDir(){$this->runState = AK_STATE_DATAREAD;return true;}private function processTypeLink(){$readBytes   = 0;$toReadBytes = 0;$leftBytes   = $this->fileHeader->compressed;$data        = '';while ($leftBytes > 0){$toReadBytes     = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;$mydata          = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($mydata);$data .= $mydata;$leftBytes -= $reallyReadBytes;if ($reallyReadBytes < $toReadBytes){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();}else{debugMsg('End of local file before reading all data with no more parts left. The archive is corrupt or truncated.');$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}}$filename = isset($this->fileHeader->realFile) ? $this->fileHeader->realFile : $this->fileHeader->file;if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (file_exists($filename)){@unlink($filename);@rmdir($filename);}if (substr($filename, -1) == '/'){$filename = substr($filename, 0, -1);}@symlink($data, $filename);}$this->runState = AK_STATE_DATAREAD;return true; }private function processTypeFileUncompressed(){if (($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun', '0')){$this->setCorrectPermissions($this->fileHeader->file);}if (!AKFactory::get('kickstart.setup.dryrun', '0')){$ignore =AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($this->fileHeader->file);if ($this->dataReadLength == 0){$outfp = @fopen($this->fileHeader->realFile, 'wb');}else{$outfp = @fopen($this->fileHeader->realFile, 'ab');}if (($outfp === false) && (!$ignore)){debugMsg('Could not write to output file');$this->setError(AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile));return false;}}if ($this->fileHeader->compressed == 0){if (!AKFactory::get('kickstart.setup.dryrun', '0') && is_resource($outfp)){@fclose($outfp);}$this->runState = AK_STATE_DATAREAD;return true;}$timer = AKFactory::getTimer();$toReadBytes = 0;$leftBytes   = $this->fileHeader->compressed - $this->dataReadLength;while (($leftBytes > 0) && ($timer->getTimeLeft() > 0)){$toReadBytes     = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;$data            = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($data);$leftBytes -= $reallyReadBytes;$this->dataReadLength += $reallyReadBytes;if ($reallyReadBytes < $toReadBytes){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();}else{debugMsg('Not enough data in file. The archive is truncated or corrupt.');$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fwrite($outfp, $data);}}}if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fclose($outfp);}}if ($leftBytes > 0){$this->runState = AK_STATE_DATA;}else{$this->runState       = AK_STATE_DATAREAD;$this->dataReadLength = 0;}return true;}private function processTypeFileCompressedSimple(){if (!AKFactory::get('kickstart.setup.dryrun', '0')){$this->setCorrectPermissions($this->fileHeader->file);$outfp = @fopen($this->fileHeader->realFile, 'wb');$ignore =AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($this->fileHeader->file);if (($outfp === false) && (!$ignore)){debugMsg('Could not write to output file');$this->setError(AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile));return false;}}if ($this->fileHeader->compressed == 0){if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fclose($outfp);}}$this->runState = AK_STATE_DATAREAD;return true;}$zipData = $this->fread($this->fp, $this->fileHeader->compressed);while (akstringlen($zipData) < $this->fileHeader->compressed){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();$bytes_left = $this->fileHeader->compressed - akstringlen($zipData);$zipData .= $this->fread($this->fp, $bytes_left);}else{debugMsg('End of local file before reading all data with no more parts left. The archive is corrupt or truncated.');$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}if ($this->fileHeader->compression == 'gzip'){$unzipData = gzinflate($zipData);}elseif ($this->fileHeader->compression == 'bzip2'){$unzipData = bzdecompress($zipData);}unset($zipData);if (!AKFactory::get('kickstart.setup.dryrun', '0') && is_resource($outfp)){@fwrite($outfp, $unzipData, $this->fileHeader->uncompressed);@fclose($outfp);}unset($unzipData);$this->runState = AK_STATE_DATAREAD;return true;}}

class AKUnarchiverZIP extends AKUnarchiverJPA{var $expectDataDescriptor = false;protected function readArchiveHeader(){debugMsg('Preparing to read archive header');$this->archiveHeaderData = new stdClass();debugMsg('Opening the first part');$this->nextFile();if ($this->fp === false){debugMsg('The first part is not readable');return false;}$sigBinary  = fread($this->fp, 4);$headerData = unpack('Vsig', $sigBinary);if ($headerData['sig'] == 0x04034b50){debugMsg('The archive is not multipart');fseek($this->fp, -4, SEEK_CUR);}else{debugMsg('The archive is multipart');}$multiPartSigs = array(0x08074b50,        0x30304b50,        0x04034b50        );if (!in_array($headerData['sig'], $multiPartSigs)){debugMsg('Invalid header signature ' . dechex($headerData['sig']));$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}$this->currentPartOffset = @ftell($this->fp);debugMsg('Current part offset after reading header: ' . $this->currentPartOffset);$this->dataReadLength = 0;return true;}protected function readFileHeader(){if ($this->isEOF(true)){debugMsg('Opening next archive part');$this->nextFile();}$this->currentPartOffset = ftell($this->fp);if ($this->expectDataDescriptor){$junk = @fread($this->fp, 4);$junk = unpack('Vsig', $junk);if ($junk['sig'] == 0x08074b50){$junk = @fread($this->fp, 12);debugMsg('Data descriptor (w/ header) skipped at ' . (ftell($this->fp) - 12));}else{$junk = @fread($this->fp, 8);debugMsg('Data descriptor (w/out header) skipped at ' . (ftell($this->fp) - 8));}if ($this->isEOF(true)){debugMsg('EOF before reading header');$this->nextFile();}}$headerBinary = fread($this->fp, 30);$headerData   =unpack('Vsig/C2ver/vbitflag/vcompmethod/vlastmodtime/vlastmoddate/Vcrc/Vcompsize/Vuncomp/vfnamelen/veflen', $headerBinary);if (!($headerData['sig'] == 0x04034b50)){debugMsg('Not a file signature at ' . (ftell($this->fp) - 4));if ($headerData['sig'] == 0x02014b50){debugMsg('EOCD signature at ' . (ftell($this->fp) - 4));while ($this->nextFile()){};@fseek($this->fp, 0, SEEK_END); return false;}else{debugMsg('Invalid signature ' . dechex($headerData['sig']) . ' at ' . ftell($this->fp));$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}$this->expectDataDescriptor = ($headerData['bitflag'] & 4) == 4;$this->fileHeader            = new stdClass();$this->fileHeader->timestamp = 0;$lastmodtime = $headerData['lastmodtime'];$lastmoddate = $headerData['lastmoddate'];if ($lastmoddate && $lastmodtime){$v_hour    = ($lastmodtime & 0xF800) >> 11;$v_minute  = ($lastmodtime & 0x07E0) >> 5;$v_seconde = ($lastmodtime & 0x001F) * 2;$v_year  = (($lastmoddate & 0xFE00) >> 9) + 1980;$v_month = ($lastmoddate & 0x01E0) >> 5;$v_day   = $lastmoddate & 0x001F;$this->fileHeader->timestamp = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);}$isBannedFile = false;$this->fileHeader->compressed   = $headerData['compsize'];$this->fileHeader->uncompressed = $headerData['uncomp'];$nameFieldLength                = $headerData['fnamelen'];$extraFieldLength               = $headerData['eflen'];$this->fileHeader->file = fread($this->fp, $nameFieldLength);$isRenamed = false;if (is_array($this->renameFiles) && (count($this->renameFiles) > 0)){if (array_key_exists($this->fileHeader->file, $this->renameFiles)){$this->fileHeader->file = $this->renameFiles[$this->fileHeader->file];$isRenamed              = true;}}$isDirRenamed = false;if (is_array($this->renameDirs) && (count($this->renameDirs) > 0)){if (array_key_exists(dirname($this->fileHeader->file), $this->renameDirs)){$file         =rtrim($this->renameDirs[dirname($this->fileHeader->file)], '/') . '/' . basename($this->fileHeader->file);$isRenamed    = true;$isDirRenamed = true;}}if ($extraFieldLength > 0){$extrafield = fread($this->fp, $extraFieldLength);}debugMsg('*' . ftell($this->fp) . ' IS START OF ' . $this->fileHeader->file . ' (' . $this->fileHeader->compressed . ' bytes)');$this->fileHeader->type = 'file';if (strrpos($this->fileHeader->file, '/') == strlen($this->fileHeader->file) - 1){$this->fileHeader->type = 'dir';}if (($headerData['ver1'] == 10) && ($headerData['ver2'] == 3)){$this->fileHeader->type = 'link';}switch ($headerData['compmethod']){case 0:$this->fileHeader->compression = 'none';break;case 8:$this->fileHeader->compression = 'gzip';break;}if ((basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..")){$isBannedFile = true;}if ((count($this->skipFiles) > 0) && (!$isRenamed)){if (in_array($this->fileHeader->file, $this->skipFiles)){$isBannedFile = true;}}if ($isBannedFile){$seekleft = $this->fileHeader->compressed;while ($seekleft > 0){$curSize = @filesize($this->archiveList[$this->currentPartNumber]);$curPos  = @ftell($this->fp);$canSeek = $curSize - $curPos;if ($canSeek > $seekleft){$canSeek = $seekleft;}@fseek($this->fp, $canSeek, SEEK_CUR);$seekleft -= $canSeek;if ($seekleft){$this->nextFile();}}$this->currentPartOffset = @ftell($this->fp);$this->runState          = AK_STATE_DONE;return true;}$this->fileHeader->file = $this->removePath($this->fileHeader->file);if (!empty($this->addPath) && !$isDirRenamed){$this->fileHeader->file = $this->addPath . $this->fileHeader->file;}if ($this->fileHeader->type == 'file'){$this->fileHeader->realFile = $this->postProcEngine->processFilename($this->fileHeader->file);}elseif ($this->fileHeader->type == 'dir'){$this->fileHeader->timestamp = 0;$dir = $this->fileHeader->file;$this->postProcEngine->createDirRecursive($this->fileHeader->file, 0755);$this->postProcEngine->processFilename(null);}else{$this->fileHeader->timestamp = 0;$this->postProcEngine->processFilename(null);}$this->createDirectory();$this->runState = AK_STATE_HEADER;return true;}}

class AKUnarchiverJPS extends AKUnarchiverJPA{protected $archiveHeaderData = array();protected $password = '';private static $pbkdf2Algorithm = 'sha1';private static $pbkdf2Iterations = 1000;private static $pbkdf2UseStaticSalt = 0;private static $pbkdf2StaticSalt = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";public function __construct(){parent::__construct();$this->password = AKFactory::get('kickstart.jps.password', '');}protected function readArchiveHeader(){$this->archiveHeaderData = new stdClass();$this->nextFile();if ($this->fp === false){return false;}$sig = fread($this->fp, 3);if ($sig != 'JPS'){$this->setError(AKText::_('ERR_NOT_A_JPS_FILE'));return false;}$bin_data    = fread($this->fp, 5);$header_data = unpack('Cmajor/Cminor/cspanned/vextra', $bin_data);$versionHumanReadable = $header_data['major'] . '.' . $header_data['minor'];$isV2Archive = version_compare($versionHumanReadable, '2.0', 'ge');$rest_length = $header_data['extra'];if ($isV2Archive && $rest_length){if (!$this->readKeyExpansionExtraHeader()){return false;}}elseif ($rest_length > 0){$junk = fread($this->fp, $rest_length);}$temp = array('signature' => $sig,'major'     => $header_data['major'],'minor'     => $header_data['minor'],'spanned'   => $header_data['spanned']);foreach ($temp as $key => $value){$this->archiveHeaderData->{$key} = $value;}$this->currentPartOffset = @ftell($this->fp);$this->dataReadLength = 0;return true;}protected function readFileHeader(){if ($this->isEOF(true)){$this->nextFile();}$this->currentPartOffset = ftell($this->fp);$signature = fread($this->fp, 3);if ($signature == 'JPE'){$this->setState('postrun');return true;}$this->fileHeader            = new stdClass();$this->fileHeader->timestamp = 0;if ($signature != 'JPF'){if ($this->isEOF(true)){$this->nextFile();if (!$this->isEOF(false)){$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));return false;}return false;}else{fseek($this->fp, -6, SEEK_CUR);$signature = fread($this->fp, 3);if ($signature == 'JPE'){return false;}$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));return false;}}$isBannedFile = false;AKEncryptionAES::setPbkdf2Algorithm(self::$pbkdf2Algorithm);AKEncryptionAES::setPbkdf2Iterations(self::$pbkdf2Iterations);AKEncryptionAES::setPbkdf2UseStaticSalt(self::$pbkdf2UseStaticSalt);AKEncryptionAES::setPbkdf2StaticSalt(self::$pbkdf2StaticSalt);$edbhData = fread($this->fp, 4);$edbh     = unpack('vencsize/vdecsize', $edbhData);$bin_data = fread($this->fp, $edbh['encsize']);$bin_data = AKEncryptionAES::AESDecryptCBC($bin_data, $this->password);$bin_data = substr($bin_data, 0, $edbh['decsize']);$length_array = unpack('vpathsize', substr($bin_data, 0, 2));$file = substr($bin_data, 2, $length_array['pathsize']);$isRenamed = false;if (is_array($this->renameFiles) && (count($this->renameFiles) > 0)){if (array_key_exists($file, $this->renameFiles)){$file      = $this->renameFiles[$file];$isRenamed = true;}}$isDirRenamed = false;if (is_array($this->renameDirs) && (count($this->renameDirs) > 0)){if (array_key_exists(dirname($file), $this->renameDirs)){$file         = rtrim($this->renameDirs[dirname($file)], '/') . '/' . basename($file);$isRenamed    = true;$isDirRenamed = true;}}$bin_data    = substr($bin_data, 2 + $length_array['pathsize']);$header_data = unpack('Ctype/Ccompression/Vuncompsize/Vperms/Vfilectime', $bin_data);$this->fileHeader->timestamp = $header_data['filectime'];$compressionType             = $header_data['compression'];$this->fileHeader->file         = $file;$this->fileHeader->uncompressed = $header_data['uncompsize'];switch ($header_data['type']){case 0:$this->fileHeader->type = 'dir';break;case 1:$this->fileHeader->type = 'file';break;case 2:$this->fileHeader->type = 'link';break;}switch ($compressionType){case 0:$this->fileHeader->compression = 'none';break;case 1:$this->fileHeader->compression = 'gzip';break;case 2:$this->fileHeader->compression = 'bzip2';break;}$this->fileHeader->permissions = $header_data['perms'];if ((basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..")){$isBannedFile = true;}if ((count($this->skipFiles) > 0) && (!$isRenamed)){if (in_array($this->fileHeader->file, $this->skipFiles)){$isBannedFile = true;}}if ($isBannedFile){$done = false;while (!$done){$binMiniHead = fread($this->fp, 8);if (in_array(substr($binMiniHead, 0, 3), array('JPF', 'JPE'))){@fseek($this->fp, -8, SEEK_CUR); $done = true; continue; }else{$miniHead = unpack('Vencsize/Vdecsize', $binMiniHead);@fseek($this->fp, $miniHead['encsize'], SEEK_CUR);}}$this->currentPartOffset = @ftell($this->fp);$this->runState          = AK_STATE_DONE;return true;}$this->fileHeader->file = $this->removePath($this->fileHeader->file);if (!empty($this->addPath) && !$isDirRenamed){$this->fileHeader->file = $this->addPath . $this->fileHeader->file;}$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);if ($this->fileHeader->type == 'file'){if ($restorePerms){$this->fileHeader->realFile =$this->postProcEngine->processFilename($this->fileHeader->file, $this->fileHeader->permissions);}else{$this->fileHeader->realFile = $this->postProcEngine->processFilename($this->fileHeader->file);}}elseif ($this->fileHeader->type == 'dir'){$dir                        = $this->fileHeader->file;$this->fileHeader->realFile = $dir;if ($restorePerms){$this->postProcEngine->createDirRecursive($this->fileHeader->file, $this->fileHeader->permissions);}else{$this->postProcEngine->createDirRecursive($this->fileHeader->file, 0755);}$this->postProcEngine->processFilename(null);}else{$this->postProcEngine->processFilename(null);}$this->createDirectory();$this->runState = AK_STATE_HEADER;$this->dataReadLength = 0;return true;}protected function createDirectory(){if (AKFactory::get('kickstart.setup.dryrun', '0')){return true;}$lastSlash = strrpos($this->fileHeader->realFile, '/');$dirName   = substr($this->fileHeader->realFile, 0, $lastSlash);$perms     = $this->flagRestorePermissions ? $retArray['permissions'] : 0755;$ignore    = AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($dirName);if (($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore)){$this->setError(AKText::sprintf('COULDNT_CREATE_DIR', $dirName));return false;}else{return true;}}protected function processFileData(){switch ($this->fileHeader->type){case 'dir':return $this->processTypeDir();break;case 'link':return $this->processTypeLink();break;case 'file':switch ($this->fileHeader->compression){case 'none':return $this->processTypeFileUncompressed();break;case 'gzip':case 'bzip2':return $this->processTypeFileCompressedSimple();break;}break;}}private function processTypeDir(){$this->runState = AK_STATE_DATAREAD;return true;}private function processTypeLink(){if ($this->fileHeader->uncompressed == 0){$this->runState = AK_STATE_DATAREAD;return true;}$binMiniHeader   = fread($this->fp, 8);$reallyReadBytes = akstringlen($binMiniHeader);if ($reallyReadBytes < 8){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();$binMiniHeader   = fread($this->fp, 8);$reallyReadBytes = akstringlen($binMiniHeader);if ($reallyReadBytes < 8){$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}else{$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}$miniHeader      = unpack('Vencsize/Vdecsize', $binMiniHeader);$toReadBytes     = $miniHeader['encsize'];$data            = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($data);if ($reallyReadBytes < $toReadBytes){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();$toReadBytes -= $reallyReadBytes;$restData        = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($data);if ($reallyReadBytes < $toReadBytes){$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}$data .= $restData;}else{$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}$data = AKEncryptionAES::AESDecryptCBC($data, $this->password);$data_length = akstringlen($data);if ($data_length < $miniHeader['decsize']){$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));return false;}$data = substr($data, 0, $miniHeader['decsize']);if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (file_exists($this->fileHeader->file)){@unlink($this->fileHeader->file);@rmdir($this->fileHeader->file);}if (substr($this->fileHeader->file, -1) == '/'){$this->fileHeader->file = substr($this->fileHeader->file, 0, -1);}@symlink($data, $this->fileHeader->file);}$this->runState = AK_STATE_DATAREAD;return true; }private function processTypeFileUncompressed(){if (($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun', '0')){$this->setCorrectPermissions($this->fileHeader->file);}if (!AKFactory::get('kickstart.setup.dryrun', '0')){$ignore =AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($this->fileHeader->file);if ($this->dataReadLength == 0){$outfp = @fopen($this->fileHeader->realFile, 'wb');}else{$outfp = @fopen($this->fileHeader->realFile, 'ab');}if (($outfp === false) && (!$ignore)){$this->setError(AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile));return false;}}if ($this->fileHeader->uncompressed == 0){if (!AKFactory::get('kickstart.setup.dryrun', '0') && is_resource($outfp)){@fclose($outfp);}$this->runState = AK_STATE_DATAREAD;return true;}else{$this->setError('An uncompressed file was detected; this is not supported by this archive extraction utility');return false;}return true;}private function processTypeFileCompressedSimple(){$timer = AKFactory::getTimer();if (($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun', '0')){$this->setCorrectPermissions($this->fileHeader->file);}if (!AKFactory::get('kickstart.setup.dryrun', '0')){$outfp = @fopen($this->fileHeader->realFile, 'wb');$ignore =AKFactory::get('kickstart.setup.ignoreerrors', false) || $this->isIgnoredDirectory($this->fileHeader->file);if (($outfp === false) && (!$ignore)){$this->setError(AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile));return false;}}if ($this->fileHeader->uncompressed == 0){if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fclose($outfp);}}$this->runState = AK_STATE_DATAREAD;return true;}$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;while (($leftBytes > 0) && ($timer->getTimeLeft() > 0)){$binMiniHeader   = fread($this->fp, 8);$reallyReadBytes = akstringlen($binMiniHeader);if ($reallyReadBytes < 8){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();$binMiniHeader   = fread($this->fp, 8);$reallyReadBytes = akstringlen($binMiniHeader);if ($reallyReadBytes < 8){$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}else{$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}$miniHeader      = unpack('Vencsize/Vdecsize', $binMiniHeader);$toReadBytes     = $miniHeader['encsize'];$data            = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($data);if ($reallyReadBytes < $toReadBytes){if ($this->isEOF(true) && !$this->isEOF(false)){$this->nextFile();$toReadBytes -= $reallyReadBytes;$restData        = $this->fread($this->fp, $toReadBytes);$reallyReadBytes = akstringlen($restData);if ($reallyReadBytes < $toReadBytes){$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}if (akstringlen($data) == 0){$data = $restData;}else{$data .= $restData;}}else{$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));return false;}}$data = AKEncryptionAES::AESDecryptCBC($data, $this->password);$data_length = akstringlen($data);if ($data_length < $miniHeader['decsize']){$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));return false;}$data = substr($data, 0, $miniHeader['decsize']);$data    = gzinflate($data);$unc_len = akstringlen($data);if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fwrite($outfp, $data, akstringlen($data));}}$this->dataReadLength += $unc_len;$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;}if (!AKFactory::get('kickstart.setup.dryrun', '0')){if (is_resource($outfp)){@fclose($outfp);}}if ($leftBytes > 0){$this->runState = AK_STATE_DATA;}else{$this->runState       = AK_STATE_DATAREAD;$this->dataReadLength = 0;}return true;}private function readKeyExpansionExtraHeader(){$signature = fread($this->fp, 4);if ($signature != "JH\x00\x01"){$this->setError(AKText::_('ERR_NOT_A_JPS_FILE'));return false;}$bin_data    = fread($this->fp, 8);$header_data = unpack('vlength/Calgo/Viterations/CuseStaticSalt', $bin_data);if ($header_data['length'] != 76){$this->setError(AKText::_('ERR_NOT_A_JPS_FILE'));return false;}switch ($header_data['algo']){case 0:$algorithm = 'sha1';break;case 1:$algorithm = 'sha256';break;case 2:$algorithm = 'sha512';break;default:$this->setError(AKText::_('ERR_NOT_A_JPS_FILE'));return false;break;}self::$pbkdf2Algorithm     = $algorithm;self::$pbkdf2Iterations    = $header_data['iterations'];self::$pbkdf2UseStaticSalt = $header_data['useStaticSalt'];self::$pbkdf2StaticSalt    = fread($this->fp, 64);return true;}}

class AKCoreTimer extends AKAbstractObject{private $max_exec_time = null;private $start_time = null;public function __construct(){parent::__construct();$this->start_time = $this->microtime_float();$config_max_exec_time = AKFactory::get('kickstart.tuning.max_exec_time', 14);$bias                 = AKFactory::get('kickstart.tuning.run_time_bias', 75) / 100;if (@function_exists('ini_get')){$php_max_exec_time = @ini_get("maximum_execution_time");if ((!is_numeric($php_max_exec_time)) || ($php_max_exec_time == 0)){$php_max_exec_time = 14;}}else{$php_max_exec_time = 14;}$php_max_exec_time--;$php_max_exec_time    = $php_max_exec_time * $bias;$config_max_exec_time = $config_max_exec_time * $bias;if ($config_max_exec_time > $php_max_exec_time){$this->max_exec_time = $php_max_exec_time;}else{$this->max_exec_time = $config_max_exec_time;}}private function microtime_float(){list($usec, $sec) = explode(" ", microtime());return ((float) $usec + (float) $sec);}public function __wakeup(){$this->start_time = $this->microtime_float();}public function getTimeLeft(){return $this->max_exec_time - $this->getRunningTime();}public function getRunningTime(){return $this->microtime_float() - $this->start_time;}public function enforce_min_exec_time(){if (@function_exists('ini_get')){$php_max_exec = @ini_get("maximum_execution_time");}else{$php_max_exec = 10;}if (($php_max_exec == "") || ($php_max_exec == 0)){$php_max_exec = 10;}$php_max_exec = max($php_max_exec * 1000 - 1000, 0);$minexectime = AKFactory::get('kickstart.tuning.min_exec_time', 0);if (!is_numeric($minexectime)){$minexectime = 0;}if ($minexectime > $php_max_exec){$minexectime = $php_max_exec;}$elapsed_time = $this->getRunningTime() * 1000;if (($minexectime > $elapsed_time) && ($elapsed_time > 0)){$sleep_msec = $minexectime - $elapsed_time;if (function_exists('usleep')){usleep(1000 * $sleep_msec);}elseif (function_exists('time_nanosleep')){$sleep_sec  = floor($sleep_msec / 1000);$sleep_nsec = 1000000 * ($sleep_msec - ($sleep_sec * 1000));time_nanosleep($sleep_sec, $sleep_nsec);}elseif (function_exists('time_sleep_until')){$until_timestamp = time() + $sleep_msec / 1000;time_sleep_until($until_timestamp);}elseif (function_exists('sleep')){$sleep_sec = ceil($sleep_msec / 1000);sleep($sleep_sec);}}elseif ($elapsed_time > 0){}}public function resetTime(){$this->start_time = $this->microtime_float();}}

class AKUtilsLister extends AKAbstractObject{public function &getFiles($folder, $pattern = '*'){$arr   = array();$false = false;if (!is_dir($folder)){return $false;}$handle = @opendir($folder);if ($handle === false){$this->setWarning('Unreadable directory ' . $folder);return $false;}while (($file = @readdir($handle)) !== false){if (!fnmatch($pattern, $file)){continue;}if (($file != '.') && ($file != '..')){$ds    =($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ?'' : DIRECTORY_SEPARATOR;$dir   = $folder . $ds . $file;$isDir = is_dir($dir);if (!$isDir){$arr[] = $dir;}}}@closedir($handle);return $arr;}public function &getFolders($folder, $pattern = '*'){$arr   = array();$false = false;if (!is_dir($folder)){return $false;}$handle = @opendir($folder);if ($handle === false){$this->setWarning('Unreadable directory ' . $folder);return $false;}while (($file = @readdir($handle)) !== false){if (!fnmatch($pattern, $file)){continue;}if (($file != '.') && ($file != '..')){$ds    =($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ?'' : DIRECTORY_SEPARATOR;$dir   = $folder . $ds . $file;$isDir = is_dir($dir);if ($isDir){$arr[] = $dir;}}}@closedir($handle);return $arr;}}

class AKText extends AKAbstractObject{private $default_translation = array('AUTOMODEON'                      => 'Auto-mode enabled','ERR_NOT_A_JPA_FILE'              => 'The file is not a JPA archive','ERR_CORRUPT_ARCHIVE'             => 'The archive file is corrupt, truncated or archive parts are missing','ERR_INVALID_LOGIN'               => 'Invalid login','COULDNT_CREATE_DIR'              => 'Could not create %s folder','COULDNT_WRITE_FILE'              => 'Could not open %s for writing.','WRONG_FTP_HOST'                  => 'Wrong FTP host or port','WRONG_FTP_USER'                  => 'Wrong FTP username or password','WRONG_FTP_PATH1'                 => 'Wrong FTP initial directory - the directory doesn\'t exist','FTP_CANT_CREATE_DIR'             => 'Could not create directory %s','FTP_TEMPDIR_NOT_WRITABLE'        => 'Could not find or create a writable temporary directory','SFTP_TEMPDIR_NOT_WRITABLE'       => 'Could not find or create a writable temporary directory','FTP_COULDNT_UPLOAD'              => 'Could not upload %s','THINGS_HEADER'                   => 'Things you should know about Akeeba Kickstart','THINGS_01'                       => 'Kickstart is not an installer. It is an archive extraction tool. The actual installer was put inside the archive file at backup time.','THINGS_02'                       => 'Kickstart is not the only way to extract the backup archive. You can use Akeeba eXtract Wizard and upload the extracted files using FTP instead.','THINGS_03'                       => 'Kickstart is bound by your server\'s configuration. As such, it may not work at all.','THINGS_04'                       => 'You should download and upload your archive files using FTP in Binary transfer mode. Any other method could lead to a corrupt backup archive and restoration failure.','THINGS_05'                       => 'Post-restoration site load errors are usually caused by .htaccess or php.ini directives. You should understand that blank pages, 404 and 500 errors can usually be worked around by editing the aforementioned files. It is not our job to mess with your configuration files, because this could be dangerous for your site.','THINGS_06'                       => 'Kickstart overwrites files without a warning. If you are not sure that you are OK with that do not continue.','THINGS_07'                       => 'Trying to restore to the temporary URL of a cPanel host (e.g. http://1.2.3.4/~username) will lead to restoration failure and your site will appear to be not working. This is normal and it\'s just how your server and CMS software work.','THINGS_08'                       => 'You are supposed to read the documentation before using this software. Most issues can be avoided, or easily worked around, by understanding how this software works.','THINGS_09'                       => 'This text does not imply that there is a problem detected. It is standard text displayed every time you launch Kickstart.','CLOSE_LIGHTBOX'                  => 'Click here or press ESC to close this message','SELECT_ARCHIVE'                  => 'Select a backup archive','ARCHIVE_FILE'                    => 'Archive file:','SELECT_EXTRACTION'               => 'Select an extraction method','WRITE_TO_FILES'                  => 'Write to files:','WRITE_HYBRID'                    => 'Hybrid (use FTP only if needed)','WRITE_DIRECTLY'                  => 'Directly','WRITE_FTP'                       => 'Use FTP for all files','WRITE_SFTP'                      => 'Use SFTP for all files','FTP_HOST'                        => '(S)FTP host name:','FTP_PORT'                        => '(S)FTP port:','FTP_FTPS'                        => 'Use FTP over SSL (FTPS)','FTP_PASSIVE'                     => 'Use FTP Passive Mode','FTP_USER'                        => '(S)FTP user name:','FTP_PASS'                        => '(S)FTP password:','FTP_DIR'                         => '(S)FTP directory:','FTP_TEMPDIR'                     => 'Temporary directory:','FTP_CONNECTION_OK'               => 'FTP Connection Established','SFTP_CONNECTION_OK'              => 'SFTP Connection Established','FTP_CONNECTION_FAILURE'          => 'The FTP Connection Failed','SFTP_CONNECTION_FAILURE'         => 'The SFTP Connection Failed','FTP_TEMPDIR_WRITABLE'            => 'The temporary directory is writable.','FTP_TEMPDIR_UNWRITABLE'          => 'The temporary directory is not writable. Please check the permissions.','FTPBROWSER_ERROR_HOSTNAME'       => "Invalid FTP host or port",'FTPBROWSER_ERROR_USERPASS'       => "Invalid FTP username or password",'FTPBROWSER_ERROR_NOACCESS'       => "Directory doesn't exist or you don't have enough permissions to access it",'FTPBROWSER_ERROR_UNSUPPORTED'    => "Sorry, your FTP server doesn't support our FTP directory browser.",'FTPBROWSER_LBL_GOPARENT'         => "&lt;up one level&gt;",'FTPBROWSER_LBL_INSTRUCTIONS'     => 'Click on a directory to navigate into it. Click on OK to select that directory, Cancel to abort the procedure.','FTPBROWSER_LBL_ERROR'            => 'An error occurred','SFTP_NO_SSH2'                    => 'Your web server does not have the SSH2 PHP module, therefore can not connect to SFTP servers.','SFTP_NO_FTP_SUPPORT'             => 'Your SSH server does not allow SFTP connections','SFTP_WRONG_USER'                 => 'Wrong SFTP username or password','SFTP_WRONG_STARTING_DIR'         => 'You must supply a valid absolute path','SFTPBROWSER_ERROR_NOACCESS'      => "Directory doesn't exist or you don't have enough permissions to access it",'SFTP_COULDNT_UPLOAD'             => 'Could not upload %s','SFTP_CANT_CREATE_DIR'            => 'Could not create directory %s','UI-ROOT'                         => '&lt;root&gt;','CONFIG_UI_FTPBROWSER_TITLE'      => 'FTP Directory Browser','FTP_BROWSE'                      => 'Browse','BTN_CHECK'                       => 'Check','BTN_RESET'                       => 'Reset','BTN_TESTFTPCON'                  => 'Test FTP connection','BTN_TESTSFTPCON'                 => 'Test SFTP connection','BTN_GOTOSTART'                   => 'Start over','FINE_TUNE'                       => 'Fine tune','BTN_SHOW_FINE_TUNE'              => 'Show advanced options (for experts)','MIN_EXEC_TIME'                   => 'Minimum execution time:','MAX_EXEC_TIME'                   => 'Maximum execution time:','SECONDS_PER_STEP'                => 'seconds per step','EXTRACT_FILES'                   => 'Extract files','BTN_START'                       => 'Start','EXTRACTING'                      => 'Extracting','DO_NOT_CLOSE_EXTRACT'            => 'Do not close this window while the extraction is in progress','RESTACLEANUP'                    => 'Restoration and Clean Up','BTN_RUNINSTALLER'                => 'Run the Installer','BTN_CLEANUP'                     => 'Clean Up','BTN_SITEFE'                      => 'Visit your site\'s front-end','BTN_SITEBE'                      => 'Visit your site\'s back-end','WARNINGS'                        => 'Extraction Warnings','ERROR_OCCURED'                   => 'An error occured','STEALTH_MODE'                    => 'Stealth mode','STEALTH_URL'                     => 'HTML file to show to web visitors','ERR_NOT_A_JPS_FILE'              => 'The file is not a JPA archive','ERR_INVALID_JPS_PASSWORD'        => 'The password you gave is wrong or the archive is corrupt','JPS_PASSWORD'                    => 'Archive Password (for JPS files)','INVALID_FILE_HEADER'             => 'Invalid header in archive file, part %s, offset %s','NEEDSOMEHELPKS'                  => 'Want some help to use this tool? Read this first:','QUICKSTART'                      => 'Quick Start Guide','CANTGETITTOWORK'                 => 'Can\'t get it to work? Click me!','NOARCHIVESCLICKHERE'             => 'No archives detected. Click here for troubleshooting instructions.','POSTRESTORATIONTROUBLESHOOTING'  => 'Something not working after the restoration? Click here for troubleshooting instructions.','UPDATE_HEADER'                   => 'An updated version of Akeeba Kickstart (<span id="update-version">unknown</span>) is available!','UPDATE_NOTICE'                   => 'You are advised to always use the latest version of Akeeba Kickstart available. Older versions may be subject to bugs and will not be supported.','UPDATE_DLNOW'                    => 'Download now','UPDATE_MOREINFO'                 => 'More information','IGNORE_MOST_ERRORS'              => 'Ignore most errors','WRONG_FTP_PATH2'                 => 'Wrong FTP initial directory - the directory doesn\'t correspond to your site\'s web root','ARCHIVE_DIRECTORY'               => 'Archive directory:','RELOAD_ARCHIVES'                 => 'Reload','CONFIG_UI_SFTPBROWSER_TITLE'     => 'SFTP Directory Browser','ERR_COULD_NOT_OPEN_ARCHIVE_PART' => 'Could not open archive part file %s for reading. Check that the file exists, is readable by the web server and is not in a directory made out of reach by chroot, open_basedir restrictions or any other restriction put in place by your host.','RENAME_FILES'                    => 'Rename server configuration files','RESTORE_PERMISSIONS'             => 'Restore file permissions',);private $strings;private $language;public function __construct(){$this->strings = $this->default_translation;$this->loadTranslation('en-GB');$this->getBrowserLanguage();if (!is_null($this->language)){$this->loadTranslation();}}private function loadTranslation($lang = null){if (defined('KSLANGDIR')){$dirname = KSLANGDIR;}else{$dirname = KSROOTDIR;}$basename = basename(__FILE__, '.php') . '.ini';if (empty($lang)){$lang = $this->language;}$translationFilename = $dirname . DIRECTORY_SEPARATOR . $lang . '.' . $basename;if (!@file_exists($translationFilename) && ($basename != 'kickstart.ini')){$basename            = 'kickstart.ini';$translationFilename = $dirname . DIRECTORY_SEPARATOR . $lang . '.' . $basename;}if (!@file_exists($translationFilename)){return;}$temp = self::parse_ini_file($translationFilename, false);if (!is_array($this->strings)){$this->strings = array();}if (empty($temp)){$this->strings = array_merge($this->default_translation, $this->strings);}else{$this->strings = array_merge($this->strings, $temp);}}public static function parse_ini_file($file, $process_sections = false, $raw_data = false){$process_sections = ($process_sections !== true) ? false : true;if (!$raw_data){$ini = @file($file);}else{$ini = $file;}if (count($ini) == 0){return array();}$sections = array();$values   = array();$result   = array();$globals  = array();$i        = 0;if (!empty($ini)){foreach ($ini as $line){$line = trim($line);$line = str_replace("\t", " ", $line);if (!preg_match('/^[a-zA-Z0-9[]/', $line)){continue;}if ($line{0} == '['){$tmp        = explode(']', $line);$sections[] = trim(substr($tmp[0], 1));$i++;continue;}list($key, $value) = explode('=', $line, 2);$key   = trim($key);$value = trim($value);if (strstr($value, ";")){$tmp = explode(';', $value);if (count($tmp) == 2){if ((($value{0} != '"') && ($value{0} != "'")) ||preg_match('/^".*"\s*;/', $value) || preg_match('/^".*;[^"]*$/', $value) ||preg_match("/^'.*'\s*;/", $value) || preg_match("/^'.*;[^']*$/", $value)){$value = $tmp[0];}}else{if ($value{0} == '"'){$value = preg_replace('/^"(.*)".*/', '$1', $value);}elseif ($value{0} == "'"){$value = preg_replace("/^'(.*)'.*/", '$1', $value);}else{$value = $tmp[0];}}}$value = trim($value);$value = trim($value, "'\"");if ($i == 0){if (substr($line, -1, 2) == '[]'){$globals[$key][] = $value;}else{$globals[$key] = $value;}}else{if (substr($line, -1, 2) == '[]'){$values[$i - 1][$key][] = $value;}else{$values[$i - 1][$key] = $value;}}}}for ($j = 0; $j < $i; $j++){if ($process_sections === true){$result[$sections[$j]] = $values[$j];}else{$result[] = $values[$j];}}return $result + $globals;}public function getBrowserLanguage(){$user_languages = array();if (isset($_SERVER["HTTP_ACCEPT_LANGUAGE"])){$languages = strtolower($_SERVER["HTTP_ACCEPT_LANGUAGE"]);$languages = str_replace(' ', '', $languages);$languages = explode(",", $languages);foreach ($languages as $language_list){$temp_array = array();$temp_array[0] = substr($language_list, 0, strcspn($language_list, ';'));$temp_array[1] = substr($language_list, 0, 2);if ((strlen($temp_array[0]) == 5) && ((substr($temp_array[0], 2, 1) == '-') || (substr($temp_array[0], 2, 1) == '_'))){$langLocation  = strtoupper(substr($temp_array[0], 3, 2));$temp_array[0] = $temp_array[1] . '-' . $langLocation;}$user_languages[] = $temp_array;}}else{$user_languages[0] = array('', ''); }$this->language = null;$basename       = basename(__FILE__, '.php') . '.ini';if (class_exists('AKUtilsLister')){$fs       = new AKUtilsLister();$iniFiles = $fs->getFiles(KSROOTDIR, '*.' . $basename);if (empty($iniFiles) && ($basename != 'kickstart.ini')){$basename = 'kickstart.ini';$iniFiles = $fs->getFiles(KSROOTDIR, '*.' . $basename);}}else{$iniFiles = null;}if (is_array($iniFiles)){foreach ($user_languages as $languageStruct){if (is_null($this->language)){$iniFiles = $fs->getFiles(KSROOTDIR, $languageStruct[1] . '-??.' . $basename);if (count($iniFiles) > 0){$filename       = $iniFiles[0];$filename       = substr($filename, strlen(KSROOTDIR) + 1);$this->language = substr($filename, 0, 5);}else{$this->language = null;}}}}if (is_null($this->language)){foreach ($user_languages as $languageStruct){if (@file_exists($languageStruct[0] . '.' . $basename) && is_null($this->language)){$this->language = $languageStruct[0];}else{}}}else{foreach ($user_languages as $languageStruct){if (substr($this->language, 0, strlen($languageStruct[1])) == $languageStruct[1]){if (file_exists($languageStruct[0] . '.' . $basename)){$this->language = $languageStruct[0];}}}}}public static function sprintf($key){$text = self::getInstance();$args = func_get_args();if (count($args) > 0){$args[0] = $text->_($args[0]);return @call_user_func_array('sprintf', $args);}return '';}public static function &getInstance(){static $instance;if (!is_object($instance)){$instance = new AKText();}return $instance;}public static function _($string){$text = self::getInstance();$key = strtoupper($string);$key = substr($key, 0, 1) == '_' ? substr($key, 1) : $key;if (isset ($text->strings[$key])){$string = $text->strings[$key];}else{if (defined($string)){$string = constant($string);}}return $string;}public function dumpLanguage(){$out = '';foreach ($this->strings as $key => $value){$out .= "$key=$value\n";}return $out;}public function asJavascript(){$out = '';foreach ($this->strings as $key => $value){$key   = addcslashes($key, '\\\'"');$value = addcslashes($value, '\\\'"');if (!empty($out)){$out .= ",\n";}$out .= "'$key':\t'$value'";}return $out;}public function resetTranslation(){$this->strings = $this->default_translation;}public function addDefaultLanguageStrings($stringList = array()){if (!is_array($stringList)){return;}if (empty($stringList)){return;}$this->strings = array_merge($stringList, $this->strings);}}

class AKFactory{private $objectlist = array();private $varlist = array();private function __construct(){}public static function serialize(){$engine = self::getUnarchiver();$engine->shutdown();$serialized = serialize(self::getInstance());if (function_exists('base64_encode') && function_exists('base64_decode')){$serialized = base64_encode($serialized);}return $serialized;}public static function &getUnarchiver($configOverride = null){static $class_name;if (!empty($configOverride)){if ($configOverride['reset']){$class_name = null;}}if (empty($class_name)){$filetype = self::get('kickstart.setup.filetype', null);if (empty($filetype)){$filename      = self::get('kickstart.setup.sourcefile', null);$basename      = basename($filename);$baseextension = strtoupper(substr($basename, -3));switch ($baseextension){case 'JPA':$filetype = 'JPA';break;case 'JPS':$filetype = 'JPS';break;case 'ZIP':$filetype = 'ZIP';break;default:die('Invalid archive type or extension in file ' . $filename);break;}}$class_name = 'AKUnarchiver' . ucfirst($filetype);}$destdir = self::get('kickstart.setup.destdir', null);if (empty($destdir)){$destdir = KSROOTDIR;}$object = self::getClassInstance($class_name);if ($object->getState() == 'init'){$sourcePath = self::get('kickstart.setup.sourcepath', '');$sourceFile = self::get('kickstart.setup.sourcefile', '');if (!empty($sourcePath)){$sourceFile = rtrim($sourcePath, '/\\') . '/' . $sourceFile;}$config = array('filename'            => $sourceFile,'restore_permissions' => self::get('kickstart.setup.restoreperms', 0),'post_proc'           => self::get('kickstart.procengine', 'direct'),'add_path'            => self::get('kickstart.setup.targetpath', $destdir),'remove_path'         => self::get('kickstart.setup.removepath', ''),'rename_files'        => self::get('kickstart.setup.renamefiles', array('.htaccess' => 'htaccess.bak', 'php.ini' => 'php.ini.bak', 'web.config' => 'web.config.bak','.user.ini' => '.user.ini.bak')),'skip_files'          => self::get('kickstart.setup.skipfiles', array(basename(__FILE__), 'kickstart.php', 'abiautomation.ini', 'htaccess.bak', 'php.ini.bak','cacert.pem')),'ignoredirectories'   => self::get('kickstart.setup.ignoredirectories', array('tmp', 'log', 'logs')),);if (!defined('KICKSTART')){$moreSkippedFiles     = array('administrator/components/com_akeeba/restoration.php','administrator/components/com_joomlaupdate/restoration.php','wp-content/plugins/akeebabackupwp/app/restoration.php','wp-content/plugins/akeebabackupcorewp/app/restoration.php','wp-content/plugins/akeebabackup/app/restoration.php','wp-content/plugins/akeebabackupwpcore/app/restoration.php','app/restoration.php',);$config['skip_files'] = array_merge($config['skip_files'], $moreSkippedFiles);}if (!empty($configOverride)){$config = array_merge($config, $configOverride);}$object->setup($config);}return $object;}public static function get($key, $default = null){$self = self::getInstance();if (array_key_exists($key, $self->varlist)){return $self->varlist[$key];}else{return $default;}}protected static function &getInstance($serialized_data = null){static $myInstance;if (!is_object($myInstance) || !is_null($serialized_data)){if (!is_null($serialized_data)){$myInstance = unserialize($serialized_data);}else{$myInstance = new self();}}return $myInstance;}protected static function &getClassInstance($class_name){$self = self::getInstance();if (!isset($self->objectlist[$class_name])){$self->objectlist[$class_name] = new $class_name;}return $self->objectlist[$class_name];}public static function unserialize($serialized_data){if (function_exists('base64_encode') && function_exists('base64_decode')){$serialized_data = base64_decode($serialized_data);}self::getInstance($serialized_data);}public static function nuke(){$self = self::getInstance();foreach ($self->objectlist as $key => $object){$self->objectlist[$key] = null;}$self->objectlist = array();}public static function set($key, $value){$self                = self::getInstance();$self->varlist[$key] = $value;}public static function &getPostProc($proc_engine = null){static $class_name;if (empty($class_name)){if (empty($proc_engine)){$proc_engine = self::get('kickstart.procengine', 'direct');}$class_name = 'AKPostproc' . ucfirst($proc_engine);}return self::getClassInstance($class_name);}public static function &getTimer(){return self::getClassInstance('AKCoreTimer');}}

interface AKEncryptionAESAdapterInterface{public function decrypt($plainText, $key);public function getBlockSize();public function isSupported();}

abstract class AKEncryptionAESAdapterAbstract{public function resizeKey($key, $size){if (empty($key)){return null;}$keyLength = strlen($key);if (function_exists('mb_strlen')){$keyLength = mb_strlen($key, 'ASCII');}if ($keyLength == $size){return $key;}if ($keyLength > $size){if (function_exists('mb_substr')){return mb_substr($key, 0, $size, 'ASCII');}return substr($key, 0, $size);}return $key . str_repeat("\0", ($size - $keyLength));}protected function getZeroPadding($string, $blockSize){$stringSize = strlen($string);if (function_exists('mb_strlen')){$stringSize = mb_strlen($string, 'ASCII');}if ($stringSize == $blockSize){return '';}if ($stringSize < $blockSize){return str_repeat("\0", $blockSize - $stringSize);}$paddingBytes = $stringSize % $blockSize;return str_repeat("\0", $blockSize - $paddingBytes);}}

class Mcrypt extends AKEncryptionAESAdapterAbstract implements AKEncryptionAESAdapterInterface{protected $cipherType = MCRYPT_RIJNDAEL_128;protected $cipherMode = MCRYPT_MODE_CBC;public function decrypt($cipherText, $key){$iv_size    = $this->getBlockSize();$key        = $this->resizeKey($key, $iv_size);$iv         = substr($cipherText, 0, $iv_size);$cipherText = substr($cipherText, $iv_size);$plainText  = mcrypt_decrypt($this->cipherType, $key, $cipherText, $this->cipherMode, $iv);return $plainText;}public function isSupported(){if (!function_exists('mcrypt_get_key_size')){return false;}if (!function_exists('mcrypt_get_iv_size')){return false;}if (!function_exists('mcrypt_create_iv')){return false;}if (!function_exists('mcrypt_encrypt')){return false;}if (!function_exists('mcrypt_decrypt')){return false;}if (!function_exists('mcrypt_list_algorithms')){return false;}if (!function_exists('hash')){return false;}if (!function_exists('hash_algos')){return false;}$algorightms = mcrypt_list_algorithms();if (!in_array('rijndael-128', $algorightms)){return false;}if (!in_array('rijndael-192', $algorightms)){return false;}if (!in_array('rijndael-256', $algorightms)){return false;}$algorightms = hash_algos();if (!in_array('sha256', $algorightms)){return false;}return true;}public function getBlockSize(){return mcrypt_get_iv_size($this->cipherType, $this->cipherMode);}}

class OpenSSL extends AKEncryptionAESAdapterAbstract implements AKEncryptionAESAdapterInterface{protected $openSSLOptions = 0;protected $method = 'aes-128-cbc';public function __construct(){$this->openSSLOptions = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;}public function decrypt($cipherText, $key){$iv_size    = $this->getBlockSize();$key        = $this->resizeKey($key, $iv_size);$iv         = substr($cipherText, 0, $iv_size);$cipherText = substr($cipherText, $iv_size);$plainText  = openssl_decrypt($cipherText, $this->method, $key, $this->openSSLOptions, $iv);return $plainText;}public function isSupported(){if (!function_exists('openssl_get_cipher_methods')){return false;}if (!function_exists('openssl_random_pseudo_bytes')){return false;}if (!function_exists('openssl_cipher_iv_length')){return false;}if (!function_exists('openssl_encrypt')){return false;}if (!function_exists('openssl_decrypt')){return false;}if (!function_exists('hash')){return false;}if (!function_exists('hash_algos')){return false;}$algorightms = openssl_get_cipher_methods();if (!in_array('aes-128-cbc', $algorightms)){return false;}$algorightms = hash_algos();if (!in_array('sha256', $algorightms)){return false;}return true;}public function getBlockSize(){return openssl_cipher_iv_length($this->method);}}

class AKEncryptionAES{protected static $Sbox =array(0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16);protected static $Rcon = array(array(0x00, 0x00, 0x00, 0x00),array(0x01, 0x00, 0x00, 0x00),array(0x02, 0x00, 0x00, 0x00),array(0x04, 0x00, 0x00, 0x00),array(0x08, 0x00, 0x00, 0x00),array(0x10, 0x00, 0x00, 0x00),array(0x20, 0x00, 0x00, 0x00),array(0x40, 0x00, 0x00, 0x00),array(0x80, 0x00, 0x00, 0x00),array(0x1b, 0x00, 0x00, 0x00),array(0x36, 0x00, 0x00, 0x00));protected static $passwords = array();private static $pbkdf2Algorithm = 'sha1';private static $pbkdf2Iterations = 1000;private static $pbkdf2UseStaticSalt = 0;private static $pbkdf2StaticSalt = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";public static function AESEncryptCtr($plaintext, $password, $nBits){$blockSize = 16;  if (!($nBits == 128 || $nBits == 192 || $nBits == 256)){return '';}  $nBytes  = $nBits / 8;  $pwBytes = array();for ($i = 0; $i < $nBytes; $i++){$pwBytes[$i] = ord(substr($password, $i, 1)) & 0xff;}$key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));$key = array_merge($key, array_slice($key, 0, $nBytes - 16));  $counterBlock = array();$nonce        = floor(microtime(true) * 1000);   $nonceSec     = floor($nonce / 1000);$nonceMs      = $nonce % 1000;for ($i = 0; $i < 4; $i++){$counterBlock[$i] = self::urs($nonceSec, $i * 8) & 0xff;}for ($i = 0; $i < 4; $i++){$counterBlock[$i + 4] = $nonceMs & 0xff;}$ctrTxt = '';for ($i = 0; $i < 8; $i++){$ctrTxt .= chr($counterBlock[$i]);}$keySchedule = self::KeyExpansion($key);$blockCount = ceil(strlen($plaintext) / $blockSize);$ciphertxt  = array();  for ($b = 0; $b < $blockCount; $b++){for ($c = 0; $c < 4; $c++){$counterBlock[15 - $c] = self::urs($b, $c * 8) & 0xff;}for ($c = 0; $c < 4; $c++){$counterBlock[15 - $c - 4] = self::urs($b / 0x100000000, $c * 8);}$cipherCntr = self::Cipher($counterBlock, $keySchedule);  $blockLength = $b < $blockCount - 1 ? $blockSize : (strlen($plaintext) - 1) % $blockSize + 1;$cipherByte  = array();for ($i = 0; $i < $blockLength; $i++){  $cipherByte[$i] = $cipherCntr[$i] ^ ord(substr($plaintext, $b * $blockSize + $i, 1));$cipherByte[$i] = chr($cipherByte[$i]);}$ciphertxt[$b] = implode('', $cipherByte);  }$ciphertext = $ctrTxt . implode('', $ciphertxt);$ciphertext = base64_encode($ciphertext);return $ciphertext;}protected static function Cipher($input, $w){    $Nb = 4;                 $Nr = count($w) / $Nb - 1; $state = array();  for ($i = 0; $i < 4 * $Nb; $i++){$state[$i % 4][floor($i / 4)] = $input[$i];}$state = self::AddRoundKey($state, $w, 0, $Nb);for ($round = 1; $round < $Nr; $round++){  $state = self::SubBytes($state, $Nb);$state = self::ShiftRows($state, $Nb);$state = self::MixColumns($state);$state = self::AddRoundKey($state, $w, $round, $Nb);}$state = self::SubBytes($state, $Nb);$state = self::ShiftRows($state, $Nb);$state = self::AddRoundKey($state, $w, $Nr, $Nb);$output = array(4 * $Nb);  for ($i = 0; $i < 4 * $Nb; $i++){$output[$i] = $state[$i % 4][floor($i / 4)];}return $output;}protected static function AddRoundKey($state, $w, $rnd, $Nb){  for ($r = 0; $r < 4; $r++){for ($c = 0; $c < $Nb; $c++){$state[$r][$c] ^= $w[$rnd * 4 + $c][$r];}}return $state;}protected static function SubBytes($s, $Nb){    for ($r = 0; $r < 4; $r++){for ($c = 0; $c < $Nb; $c++){$s[$r][$c] = self::$Sbox[$s[$r][$c]];}}return $s;}protected static function ShiftRows($s, $Nb){    $t = array(4);for ($r = 1; $r < 4; $r++){for ($c = 0; $c < 4; $c++){$t[$c] = $s[$r][($c + $r) % $Nb];}  for ($c = 0; $c < 4; $c++){$s[$r][$c] = $t[$c];}         }          return $s;  }protected static function MixColumns($s){for ($c = 0; $c < 4; $c++){$a = array(4);  $b = array(4);  for ($i = 0; $i < 4; $i++){$a[$i] = $s[$i][$c];$b[$i] = $s[$i][$c] & 0x80 ? $s[$i][$c] << 1 ^ 0x011b : $s[$i][$c] << 1;}$s[0][$c] = $b[0] ^ $a[1] ^ $b[1] ^ $a[2] ^ $a[3]; $s[1][$c] = $a[0] ^ $b[1] ^ $a[2] ^ $b[2] ^ $a[3]; $s[2][$c] = $a[0] ^ $a[1] ^ $b[2] ^ $a[3] ^ $b[3]; $s[3][$c] = $a[0] ^ $b[0] ^ $a[1] ^ $a[2] ^ $b[3]; }return $s;}protected static function KeyExpansion($key){$Nb = 4;$Nk = (int) (count($key) / 4);$Nr = $Nk + 6;$w    = array();$temp = array();for ($i = 0; $i < $Nk; $i++){$r     = array($key[4 * $i], $key[4 * $i + 1], $key[4 * $i + 2], $key[4 * $i + 3]);$w[$i] = $r;}for ($i = $Nk; $i < ($Nb * ($Nr + 1)); $i++){$w[$i] = array();for ($t = 0; $t < 4; $t++){$temp[$t] = $w[$i - 1][$t];}if ($i % $Nk == 0){$temp = self::SubWord(self::RotWord($temp));for ($t = 0; $t < 4; $t++){$rConIndex = (int) ($i / $Nk);$temp[$t] ^= self::$Rcon[$rConIndex][$t];}}else if ($Nk > 6 && $i % $Nk == 4){$temp = self::SubWord($temp);}for ($t = 0; $t < 4; $t++){$w[$i][$t] = $w[$i - $Nk][$t] ^ $temp[$t];}}return $w;}protected static function SubWord($w){    for ($i = 0; $i < 4; $i++){$w[$i] = self::$Sbox[$w[$i]];}return $w;}protected static function RotWord($w){    $tmp = $w[0];for ($i = 0; $i < 3; $i++){$w[$i] = $w[$i + 1];}$w[3] = $tmp;return $w;}protected static function urs($a, $b){$a &= 0xffffffff;$b &= 0x1f;  if ($a & 0x80000000 && $b > 0){   $a = ($a >> 1) & 0x7fffffff;   $a = $a >> ($b - 1);           }else{                       $a = ($a >> $b);               }return $a;}public static function AESDecryptCtr($ciphertext, $password, $nBits){$blockSize = 16;  if (!($nBits == 128 || $nBits == 192 || $nBits == 256)){return '';}$ciphertext = base64_decode($ciphertext);$nBytes  = $nBits / 8;  $pwBytes = array();for ($i = 0; $i < $nBytes; $i++){$pwBytes[$i] = ord(substr($password, $i, 1)) & 0xff;}$key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));$key = array_merge($key, array_slice($key, 0, $nBytes - 16));  $counterBlock = array();$ctrTxt       = substr($ciphertext, 0, 8);for ($i = 0; $i < 8; $i++){$counterBlock[$i] = ord(substr($ctrTxt, $i, 1));}$keySchedule = self::KeyExpansion($key);$nBlocks = ceil((strlen($ciphertext) - 8) / $blockSize);$ct      = array();for ($b = 0; $b < $nBlocks; $b++){$ct[$b] = substr($ciphertext, 8 + $b * $blockSize, 16);}$ciphertext = $ct;  $plaintxt = array();for ($b = 0; $b < $nBlocks; $b++){for ($c = 0; $c < 4; $c++){$counterBlock[15 - $c] = self::urs($b, $c * 8) & 0xff;}for ($c = 0; $c < 4; $c++){$counterBlock[15 - $c - 4] = self::urs(($b + 1) / 0x100000000 - 1, $c * 8) & 0xff;}$cipherCntr = self::Cipher($counterBlock, $keySchedule);  $plaintxtByte = array();for ($i = 0; $i < strlen($ciphertext[$b]); $i++){$plaintxtByte[$i] = $cipherCntr[$i] ^ ord(substr($ciphertext[$b], $i, 1));$plaintxtByte[$i] = chr($plaintxtByte[$i]);}$plaintxt[$b] = implode('', $plaintxtByte);}$plaintext = implode('', $plaintxt);return $plaintext;}public static function AESDecryptCBC($ciphertext, $password){$adapter = self::getAdapter();if (!$adapter->isSupported()){return false;}$data_size = unpack('V', substr($ciphertext, -4));$salt             = substr($ciphertext, -92, 68);$rightStringLimit = -4;$params        = self::getKeyDerivationParameters();$keySizeBytes  = $params['keySize'];$algorithm     = $params['algorithm'];$iterations    = $params['iterations'];$useStaticSalt = $params['useStaticSalt'];if (substr($salt, 0, 4) == 'JPST'){$salt             = substr($salt, 4);$rightStringLimit -= 68;$key          = self::pbkdf2($password, $salt, $algorithm, $iterations, $keySizeBytes);}elseif ($useStaticSalt){$key = self::getStaticSaltExpandedKey($password);}else{$key = self::expandKey($password);}$iv               = substr($ciphertext, -24, 20);if (substr($iv, 0, 4) == 'JPIV'){$iv               = substr($iv, 4);$rightStringLimit -= 20;}else{$iv = self::createTheWrongIV($password);}$plaintext = $adapter->decrypt($iv . substr($ciphertext, 0, $rightStringLimit), $key);if (strlen($plaintext) > $data_size){$plaintext = substr($plaintext, 0, $data_size);}return $plaintext;}public static function createTheWrongIV($password){static $ivs = array();$key = md5($password);if (!isset($ivs[$key])){$nBytes  = 16;  $pwBytes = array();for ($i = 0; $i < $nBytes; $i++){$pwBytes[$i] = ord(substr($password, $i, 1)) & 0xff;}$iv    = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));$newIV = '';foreach ($iv as $int){$newIV .= chr($int);}$ivs[$key] = $newIV;}return $ivs[$key];}public static function expandKey($password){$nBits     = 128;$lookupKey = md5($password . '-' . $nBits);if (array_key_exists($lookupKey, self::$passwords)){$key = self::$passwords[$lookupKey];return $key;}$nBytes  = $nBits / 8; $pwBytes = array();for ($i = 0; $i < $nBytes; $i++){$pwBytes[$i] = ord(substr($password, $i, 1)) & 0xff;}$key    = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));$key    = array_merge($key, array_slice($key, 0, $nBytes - 16)); $newKey = '';foreach ($key as $int){$newKey .= chr($int);}$key = $newKey;self::$passwords[$lookupKey] = $key;return $key;}public static function getAdapter(){static $adapter = null;if (is_object($adapter) && ($adapter instanceof AKEncryptionAESAdapterInterface)){return $adapter;}$adapter = new OpenSSL();if (!$adapter->isSupported()){$adapter = new Mcrypt();}return $adapter;}public static function getPbkdf2Algorithm(){return self::$pbkdf2Algorithm;}public static function setPbkdf2Algorithm($pbkdf2Algorithm){self::$pbkdf2Algorithm = $pbkdf2Algorithm;}public static function getPbkdf2Iterations(){return self::$pbkdf2Iterations;}public static function setPbkdf2Iterations($pbkdf2Iterations){self::$pbkdf2Iterations = $pbkdf2Iterations;}public static function getPbkdf2UseStaticSalt(){return self::$pbkdf2UseStaticSalt;}public static function setPbkdf2UseStaticSalt($pbkdf2UseStaticSalt){self::$pbkdf2UseStaticSalt = $pbkdf2UseStaticSalt;}public static function getPbkdf2StaticSalt(){return self::$pbkdf2StaticSalt;}public static function setPbkdf2StaticSalt($pbkdf2StaticSalt){self::$pbkdf2StaticSalt = $pbkdf2StaticSalt;}public static function getKeyDerivationParameters(){return array('keySize'       => 16,'algorithm'     => self::$pbkdf2Algorithm,'iterations'    => self::$pbkdf2Iterations,'useStaticSalt' => self::$pbkdf2UseStaticSalt,'staticSalt'    => self::$pbkdf2StaticSalt,);}public static function pbkdf2($password, $salt, $algorithm = 'sha1', $count = 1000, $key_length = 16){if (function_exists("hash_pbkdf2")){return hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, true);}$hash_length = akstringlen(hash($algorithm, "", true));$block_count = ceil($key_length / $hash_length);$output = "";for ($i = 1; $i <= $block_count; $i++){$last = $salt . pack("N", $i);$xorResult = hash_hmac($algorithm, $last, $password, true);$last      = $xorResult;for ($j = 1; $j < $count; $j++){$last = hash_hmac($algorithm, $last, $password, true);$xorResult ^= $last;}$output .= $xorResult;}return aksubstr($output, 0, $key_length);}private static function getStaticSaltExpandedKey($password){$params        = self::getKeyDerivationParameters();$keySizeBytes  = $params['keySize'];$algorithm     = $params['algorithm'];$iterations    = $params['iterations'];$staticSalt    = $params['staticSalt'];$lookupKey = "PBKDF2-$algorithm-$iterations-" . md5($password . $staticSalt);if (!array_key_exists($lookupKey, self::$passwords)){self::$passwords[$lookupKey] = self::pbkdf2($password, $staticSalt, $algorithm, $iterations, $keySizeBytes);}return self::$passwords[$lookupKey];}}

function masterSetup(){$ini_data = null;if (!defined('KICKSTART')){$setupFile = 'restoration.php';if (!file_exists($setupFile)){AKFactory::set('kickstart.enabled', false);return false;}require_once $setupFile;$ini_data = $restoration_setup;if (empty($ini_data)){AKFactory::set('kickstart.enabled', false);return false;}AKFactory::set('kickstart.enabled', true);}else{global $restoration_setup;if (!empty($restoration_setup) && !is_array($restoration_setup)){$ini_data = AKText::parse_ini_file($restoration_setup, false, true);}elseif (is_array($restoration_setup)){$ini_data = $restoration_setup;}}if (!empty($ini_data)){foreach ($ini_data as $key => $value){AKFactory::set($key, $value);}AKFactory::set('kickstart.enabled', true);}$ini_data = null;$json = getQueryParam('json', null);if (!empty($_REQUEST)){foreach ($_REQUEST as $key => $value){unset($_REQUEST[$key]);}}if (!empty($_POST)){foreach ($_POST as $key => $value){unset($_POST[$key]);}}if (!empty($_GET)){foreach ($_GET as $key => $value){unset($_GET[$key]);}}$password = AKFactory::get('kickstart.security.password', null);if (!empty($json)){if (!empty($password)){$json = AKEncryptionAES::AESDecryptCtr($json, $password, 128);if (empty($json)){die('###{"status":false,"message":"Invalid login"}###');}}$raw = json_decode($json, true);if (!empty($password) && (empty($raw))){die('###{"status":false,"message":"Invalid login"}###');}if (!empty($raw)){foreach ($raw as $key => $value){$_REQUEST[$key] = $value;}}}elseif (!empty($password)){die('###{"status":false,"message":"Invalid login"}###');}$serialized = getQueryParam('factory', null);if (!is_null($serialized)){AKFactory::unserialize($serialized);AKFactory::set('kickstart.enabled', true);return true;}if (defined('KICKSTART')){$configuration = getQueryParam('configuration');if (!is_null($configuration)){$ini_data = json_decode($configuration, true);}else{$ini_data = array('kickstart.enabled' => true);}if (!empty($ini_data)){foreach ($ini_data as $key => $value){AKFactory::set($key, $value);}AKFactory::set('kickstart.enabled', true);return true;}}}

if (!defined('KICKSTART')){class RestorationObserver extends AKAbstractPartObserver{public $compressedTotal = 0;public $uncompressedTotal = 0;public $filesProcessed = 0;public function update($object, $message){if (!is_object($message)){return;}if (!array_key_exists('type', get_object_vars($message))){return;}if ($message->type == 'startfile'){$this->filesProcessed++;$this->compressedTotal += $message->content->compressed;$this->uncompressedTotal += $message->content->uncompressed;}}public function __toString(){return __CLASS__;}}masterSetup();$retArray = array('status'  => true,'message' => null);$enabled = AKFactory::get('kickstart.enabled', false);if ($enabled){$task = getQueryParam('task');switch ($task){case 'ping':$timer = AKFactory::getTimer();$timer->enforce_min_exec_time();break;case 'startRestore':AKFactory::nuke(); case 'stepRestore':$engine   = AKFactory::getUnarchiver(); $observer = new RestorationObserver(); $engine->attach($observer); $engine->tick();$ret = $engine->getStatusArray();if ($ret['Error'] != ''){$retArray['status']  = false;$retArray['done']    = true;$retArray['message'] = $ret['Error'];}elseif (!$ret['HasRun']){$retArray['files']    = $observer->filesProcessed;$retArray['bytesIn']  = $observer->compressedTotal;$retArray['bytesOut'] = $observer->uncompressedTotal;$retArray['status']   = true;$retArray['done']     = true;}else{$retArray['files']    = $observer->filesProcessed;$retArray['bytesIn']  = $observer->compressedTotal;$retArray['bytesOut'] = $observer->uncompressedTotal;$retArray['status']   = true;$retArray['done']     = false;$retArray['factory']  = AKFactory::serialize();}break;case 'finalizeRestore':$root = AKFactory::get('kickstart.setup.destdir');recursive_remove_directory($root . '/installation');$postproc = AKFactory::getPostProc();if (file_exists($root . '/htaccess.bak')){if (file_exists($root . '/.htaccess')){$postproc->unlink($root . '/.htaccess');}$postproc->rename($root . '/htaccess.bak', $root . '/.htaccess');}if (file_exists($root . '/web.config.bak')){if (file_exists($root . '/web.config')){$postproc->unlink($root . '/web.config');}$postproc->rename($root . '/web.config.bak', $root . '/web.config');}$basepath = KSROOTDIR;$basepath = rtrim(str_replace('\\', '/', $basepath), '/');if (!empty($basepath)){$basepath .= '/';}$postproc->unlink($basepath . 'restoration.php');$filename = dirname(__FILE__) . '/restore_finalisation.php';if (file_exists($filename)){if (function_exists('opcache_invalidate')){opcache_invalidate($filename);}if (function_exists('apc_compile_file')){apc_compile_file($filename);}if (function_exists('wincache_refresh_if_changed')){wincache_refresh_if_changed(array($filename));}if (function_exists('xcache_asm')){xcache_asm($filename);}include_once $filename;}if (function_exists('finalizeRestore')){finalizeRestore($root, $basepath);}break;default:$enabled = false;break;}}if (!$enabled){$retArray['status']  = false;$retArray['message'] = AKText::_('ERR_INVALID_LOGIN');}$json = json_encode($retArray);$password = AKFactory::get('kickstart.security.password', null);if (!empty($password)){$json = AKEncryptionAES::AESEncryptCtr($json, $password, 128);}echo "###$json###";}function recursive_remove_directory($directory){if (substr($directory, -1) == '/'){$directory = substr($directory, 0, -1);}if (!file_exists($directory) || !is_dir($directory)){return false;}elseif (!is_readable($directory)){return false;}else{$handle   = opendir($directory);$postproc = AKFactory::getPostProc();while (false !== ($item = readdir($handle))){if ($item != '.' && $item != '..'){$path = $directory . '/' . $item;if (is_dir($path)){recursive_remove_directory($path);}else{$postproc->unlink($path);}}}closedir($handle);if (!$postproc->rmdir($directory)){return false;}return true;}}
